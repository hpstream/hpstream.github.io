(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{440:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"gulp使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gulp使用"}},[s._v("#")]),s._v(" gulp使用")]),s._v(" "),t("h2",{attrs:{id:"_1-什么是gulp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是gulp"}},[s._v("#")]),s._v(" 1.什么是gulp")]),s._v(" "),t("p",[t("strong",[s._v("简单来说就是一个包管理工具。")])]),s._v(" "),t("h2",{attrs:{id:"_2-gulp基础内容讲解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-gulp基础内容讲解"}},[s._v("#")]),s._v(" 2.gulp基础内容讲解")]),s._v(" "),t("h3",{attrs:{id:"_2-1-gulp-src-globs-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-gulp-src-globs-options"}},[s._v("#")]),s._v(" 2.1 gulp.src(globs[, options])")]),s._v(" "),t("p",[t("strong",[s._v("2.1.1 说明：src方法是指定需要处理的源文件的路径，gulp借鉴了Unix操作系统的管道（pipe）思想，\n前一级的输出，直接变成后一级的输入，gulp.src返回当前文件流至可用插件；")])]),s._v(" "),t("p",[t("strong",[s._v("2.1.2 globs：需要处理的源文件匹配符路径。类型(必填)：String or StringArray；")])]),s._v(" "),t("p",[t("strong",[s._v("通配符路径匹配示例：")])]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("“src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js”：指定具体文件；\n\n“"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("”：匹配所有文件    例：src"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*.js(包含src下的所有js文件)；\n\n“**”：匹配0个或多个子文件夹    例：src/**/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("js")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("包含src的"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("个或多个子文件夹下的js文件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\n\n“"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("”：匹配多个属性    例：src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("js")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("包含a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js和b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js文件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  src"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；\n\n“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；\n")])])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var gulp = require('gulp'),\n    less = require('gulp-less');\n \ngulp.task('testLess', function () {\n    //gulp.src('less/test/style.less')\n    gulp.src(['less/**/*.less','!less/{extend,page}/*.less'])\n        .pipe(less())\n        .pipe(gulp.dest('./css'));\n});\n")])])]),t("p",[t("strong",[s._v("1.3 options：  类型(可选)：Object，有3个属性buffer、read、base；")])]),s._v(" "),t("p",[t("strong",[s._v("options.buffer：  类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；")])]),s._v(" "),t("p",[t("strong",[s._v("options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；")])]),s._v(" "),t("p",[t("strong",[s._v("options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接，具体看下面示例")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gulp.src('client/js/**/*.js') \n  .pipe(minify())\n  .pipe(gulp.dest('build'));  // Writes 'build/somedir/somefile.js'\n \ngulp.src('client/js/**/*.js', { base: 'client' })\n  .pipe(minify())\n  .pipe(gulp.dest('build'));  // Writes 'build/js/somedir/somefile.js'\n")])])]),t("h3",{attrs:{id:"_2-gulp-dest-path-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-gulp-dest-path-options"}},[s._v("#")]),s._v(" 2. gulp.dest(path[, options])")]),s._v(" "),t("p",[t("strong",[s._v("2.1 说明：dest方法是指定处理完后文件输出的路径")]),s._v("；")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gulp.src('./client/templates/*.jade')\n  .pipe(jade())\n  .pipe(gulp.dest('./build/templates'))\n  .pipe(minify())\n  .pipe(gulp.dest('./build/minified_templates'));\n")])])]),t("h3",{attrs:{id:"_2-2-path-类型-必填-string-or-function-指定文件输出路径-或者定义函数返回文件输出路径亦可"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-path-类型-必填-string-or-function-指定文件输出路径-或者定义函数返回文件输出路径亦可"}},[s._v("#")]),s._v(" 2.2 path：类型(必填)：String or Function 指定文件输出路径，或者定义函数返回文件输出路径亦可；")]),s._v(" "),t("h3",{attrs:{id:"_2-3-options-类型-可选-object-有2个属性cwd、mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-options-类型-可选-object-有2个属性cwd、mode"}},[s._v("#")]),s._v(" 2.3 options：类型(可选)：Object，有2个属性cwd、mode；")]),s._v(" "),t("p",[t("strong",[s._v("options.cwd：  类型：String  默认：process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到；")])]),s._v(" "),t("p",[t("strong",[s._v("options.mode：  类型：String  默认：0777 指定被创建文件夹的权限；")])]),s._v(" "),t("h3",{attrs:{id:"_3-gulp-task-name-deps-fn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-gulp-task-name-deps-fn"}},[s._v("#")]),s._v(" 3. gulp.task(name[, deps], fn)")]),s._v(" "),t("p",[t("strong",[s._v("3.1、说明：task定义一个gulp任务；")])]),s._v(" "),t("p",[t("strong",[s._v("3.2、name：  类型(必填)：String 指定任务的名称（不应该有空格）；")])]),s._v(" "),t("p",[t("strong",[s._v("3.3、deps：  类型(可选)：StringArray，该任务依赖的任务（注意：被依赖的任务需要返回当前任务的事件流，请参看下面示例）；")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gulp.task('testLess', function () {\n    return gulp.src(['less/style.less'])\n        .pipe(less())\n        .pipe(gulp.dest('./css'));\n});\n \ngulp.task('minicss', ['testLess'], function () { //执行完testLess任务后再执行minicss任务\n    gulp.src(['css/*.css'])\n        .pipe(minifyCss())\n        .pipe(gulp.dest('./dist/css'));\n});\n")])])]),t("p",[t("strong",[s._v("3.4、fn：  类型(必填)：Function 该任务调用的插件操作；")])]),s._v(" "),t("h3",{attrs:{id:"_4、gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb"}},[s._v("#")]),s._v(" 4、gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])")]),s._v(" "),t("p",[t("strong",[s._v("4.1、说明：watch方法是用于监听文件变化，文件一修改就会执行指定的任务；")])]),s._v(" "),t("p",[t("strong",[s._v("4.2、glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；")])]),s._v(" "),t("p",[t("strong",[s._v("4.3、opts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；")])]),s._v(" "),t("p",[t("strong",[s._v("4.4、tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；")])]),s._v(" "),t("p",[t("strong",[s._v("4.5、cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gulp.task('watch1', function () {\n    gulp.watch('less/**/*.less', ['testLess']);\n});\n \ngulp.task('watch2', function () {\n    gulp.watch('js/**/*.js', function (event) {\n        console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n    });\n});\n")])])]),t("h2",{attrs:{id:"_3-gulp插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-gulp插件"}},[s._v("#")]),s._v(" 3.gulp插件")]),s._v(" "),t("h3",{attrs:{id:"_3-1插件使用注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1插件使用注意事项"}},[s._v("#")]),s._v(" 3.1插件使用注意事项：")]),s._v(" "),t("p",[t("strong",[s._v("插件需要先 npm/cnpm install xx --save-dev")])]),s._v(" "),t("p",[t("strong",[s._v("gulp taskname，如果 task 已经设置成 default 的依赖，直接 gulp 即可")])]),s._v(" "),t("p",[t("strong",[s._v("task 中的文件路径都是相对 gulpfile.js 的")])]),s._v(" "),t("p",[t("strong",[s._v("gulp.dest() 指向的目录不存在，会被创建")])]),s._v(" "),t("p",[t("strong",[s._v("task 中的 gulp.src 前记得加上 return（注意我下面的示例很多并没有加）。为什么要加参考 Gulp 入门 中 「6. API 参考」src 一节")])]),s._v(" "),t("h3",{attrs:{id:"_3-2-js-压缩、合并、重命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-js-压缩、合并、重命名"}},[s._v("#")]),s._v(" 3.2 JS 压缩、合并、重命名")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let gulp = require('gulp');\nlet concat = require('gulp-concat');  // 合并\nlet uglify = require('gulp-uglify');  // 压缩\nlet rename = require('gulp-rename');  // 重命名\nlet jshint = require('gulp-jshint');  // 注意需要同时安装 jshint\n\ngulp.task('scripts', function() {  // 这个任务的名称是 scripts\n  gulp.src('src/js/*.js')  // 将 src/js/ 目录下的所有 js 文件合并\n    .pipe(jshint())\n    .pipe(jshint.reporter('default'))\n    .pipe(concat('all.js'))  // 指定合并后的文件名为 all.js\n    .pipe(gulp.dest('dist/js/'))  // 保存合并后的文件\n    .pipe(uglify())  // 压缩\n    // .pipe(rename('all.min.js'))  // 重命名\n    .pipe(rename({suffix: '.min'}))  // 和上一行等效\n    .pipe(gulp.dest('dist/js/'));\n});\n")])])]),t("h3",{attrs:{id:"_3-3-sass-编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-sass-编译"}},[s._v("#")]),s._v(" 3.3 Sass 编译")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let gulp = require('gulp');\nlet sass = require('gulp-sass');  // sass -> css\nlet prefixer = require('gulp-autoprefixer');  // 增加前缀\nlet minify = require('gulp-minify-css');  // css 压缩\nlet notify = require('gulp-notify');  // 打印提醒语句\nlet concat = require('gulp-concat');  // 合并\n\n// 编译Sass\ngulp.task('css', function() {  // 任务名\n  gulp.src('sass/*.scss')  // 目标 sass 文件\n    .pipe(sass())  // sass -> css\n    .pipe(prefixer('last 2 versions'))  // 参数配置参考 <https://github.com/ai/browserslist>\n    .pipe(minify())  // 压缩\n    .pipe(gulp.dest('css'))  // 目标目录\n    .pipe(notify({message: 'done'}))\n    .pipe(concat('all.min.css'))  // 合并\n    .pipe(gulp.dest('css'));  // 目标目录\n});\n")])])]),t("h4",{attrs:{id:"_3-4-图片压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-图片压缩"}},[s._v("#")]),s._v(" 3.4 图片压缩")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let gulp = require('gulp');\nlet imagemin = require('gulp-imagemin');\nlet cache = require('gulp-cache');  // 减少重复压缩\n\ngulp.task('images', function() {\n  gulp.src('src/images/*')\n    .pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))\n    .pipe(gulp.dest('dist/images/'));\n});\n")])])]),t("h3",{attrs:{id:"_3-5-监控文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-监控文件"}},[s._v("#")]),s._v(" 3.5 监控文件")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gulp.task('watch', function() {  // 指定任务名为 watch\n  // 监控 a.scss 文件，如果有修改，则执行 sass 任务\n  gulp.watch('src/sass/a.scss', ['sass']);\n});\n")])])]),t("p",[t("strong",[s._v("注意先要用 gulp watch 开启监听，或者直接将 watch 任务设置为 default 的依赖")])]),s._v(" "),t("h3",{attrs:{id:"_3-6-删除文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-删除文件"}},[s._v("#")]),s._v(" 3.6 删除文件")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let gulp = require('gulp');\nlet clean = require('gulp-clean');\n\ngulp.task('clean', function() {\n  return gulp.src(['dist/js/*', 'dist/sass/*', 'dist/images/*'], {read: false})\n    .pipe(clean());\n});\n")])])]),t("h3",{attrs:{id:"_3-7-gulp-load-plugins-模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-gulp-load-plugins-模块"}},[s._v("#")]),s._v(" 3.7 gulp-load-plugins 模块")]),s._v(" "),t("p",[t("strong",[s._v("如果引入的插件很多，可以尝试用 gulp-load-plugins 模块，它会将 package.json 中的依赖全部引入")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let gulp = require('gulp');\n// let sass = require('gulp-sass');\n// let minify = require('gulp-minify-css');\n// let notify = require('gulp-notify');\nlet gulpLoadPlugins = require('gulp-load-plugins');\nlet plugins = gulpLoadPlugins();\n\n// 编译Sass\ngulp.task('sass', function() {  // 任务名\n  gulp.src('src/sass/a.scss')  // 目标 sass 文件\n    .pipe(plugins.sass({ style: 'compressed' }))  // sass -> css\n    .pipe(plugins.minifyCss())\n    .pipe(plugins.notify({message: '压缩完了'}))\n    .pipe(gulp.dest('sass', {\n      cwd: 'dist',  // 实际目录 dist/sass/\n      mode: '0644'\n    }));  // 目标目录\n});\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);