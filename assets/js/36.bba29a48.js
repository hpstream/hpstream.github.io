(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{446:function(e,t,n){"use strict";n.r(t);var a=n(2),v=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式详解"}},[e._v("#")]),e._v(" 正则表达式详解")]),e._v(" "),t("h2",{attrs:{id:"引言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[e._v("#")]),e._v(" 引言")]),e._v(" "),t("p",[e._v("亲爱的读者朋友，如果你点开了这篇文章，说明你对正则很感兴趣。\n想必你也了解正则的重要性，在我看来正则表达式是衡量程序员水平的一个侧面标准。\n关于正则表达式的教程，网上也有很多，相信你也看了一些。\n与之不同的是，本文的目的是希望所有认真读完的童鞋们，都有实质性的提高。\n本文内容共有七章，用JavaScript语言完整地讨论了正则表达式的方方面面。\n如果觉得文章某块儿没有说明白清楚，欢迎留言，能力范围之内，老姚必做详细解答。\n具体章节如下：")]),e._v(" "),t("ul",[t("li",[e._v("引言")]),e._v(" "),t("li",[e._v("第一章 正则表达式字符匹配攻略")]),e._v(" "),t("li",[e._v("第二章 正则表达式位置匹配攻略")]),e._v(" "),t("li",[e._v("第三章 正则表达式括号的作用")]),e._v(" "),t("li",[e._v("第四章 正则表达式回溯法原理")]),e._v(" "),t("li",[e._v("第五章 正则表达式的拆分")]),e._v(" "),t("li",[e._v("第六章 正则表达式的构建")]),e._v(" "),t("li",[e._v("第七章 正则表达式编程")]),e._v(" "),t("li",[e._v("后记")])]),e._v(" "),t("p",[e._v("下面简单地说说每一章都讨论了什么？\n"),t("strong",[e._v("正则是匹配模式，要么匹配字符，要么匹配位置。")]),e._v("\n第1章和第2章以这个角度去讲解了正则的基础。\n"),t("strong",[e._v("在正则中可以使用括号捕获数据，要么在API中进行分组引用，要么在正则里进行反向引用。")]),e._v("\n这是第3章的主题，讲解了正则中括号的作用。\n"),t("strong",[e._v("学习正则表达式，是需要了解其匹配原理的。")]),e._v("\n第4章，讲解了正则了正则表达式的回溯法原理。另外在第6章里，也讲解了正则的表达式的整体工作原理。\n"),t("strong",[e._v("不仅能看懂别人的正则，还要自己会写正则。")]),e._v("\n第5章，是从读的角度，去拆分一个正则表达式，而第6章是从写的角度，去构建一个正则表达式。\n"),t("strong",[e._v("学习正则，是为了在真实世界里应用的。")]),e._v("\n第7章讲解了正则的用法，和相关API需要注意的地方。\n"),t("strong",[e._v("如何阅读本文？")]),e._v("\n我的建议是阅读两遍。第一遍，不求甚解地快速阅读一遍。阅读过程中遇到的问题不妨记录下来，也许阅读完毕后就能解决很多。然后有时间的话，再带着问题去精读第二遍。\n深呼吸，开始我们的正则表达式旅程吧。我在终点等你。")]),e._v(" "),t("h2",{attrs:{id:"第一章-正则表达式字符匹配攻略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一章-正则表达式字符匹配攻略"}},[e._v("#")]),e._v(" 第一章 正则表达式字符匹配攻略")]),e._v(" "),t("p",[e._v("正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。\n然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。\n毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。\n内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("两种模糊匹配")]),e._v(" "),t("li",[e._v("字符组")]),e._v(" "),t("li",[e._v("量词")]),e._v(" "),t("li",[e._v("分支结构")]),e._v(" "),t("li",[e._v("案例分析")])]),e._v(" "),t("h3",{attrs:{id:"_1-两种模糊匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-两种模糊匹配"}},[e._v("#")]),e._v(" 1 两种模糊匹配")]),e._v(" "),t("p",[e._v("如果正则只有精确匹配是没多大意义的，比如"),t("code",[e._v("/hello/")]),e._v('，也只能匹配字符串中的"hello"这个子串。')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /hello/;\nconsole.log( regex.test("hello") ); \n// => true\n复制代码\n')])])]),t("p",[e._v("正则表达式之所以强大，是因为其能实现模糊匹配。\n而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。\n"),t("strong",[e._v("1.1 横向模糊匹配")]),e._v("\n横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。\n其实现的方式是使用量词。譬如"),t("code",[e._v("{m,n}")]),e._v("，表示连续出现最少m次，最多n次。\n比如"),t("code",[e._v("/ab{2,5}c/")]),e._v("表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /ab{2,5}c/g;\nvar string = "abc abbc abbbc abbbbc abbbbbc abbbbbbc";\nconsole.log( string.match(regex) ); \n// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]\n复制代码\n')])])]),t("p",[e._v("注意：案例中用的正则是"),t("code",[e._v("/ab{2,5}c/g")]),e._v("，后面多了"),t("code",[e._v("g")]),e._v("，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。\n"),t("strong",[e._v("1.2 纵向模糊匹配")]),e._v("\n纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。\n其实现的方式是使用字符组。譬如"),t("code",[e._v("[abc]")]),e._v("，表示该字符是可以字符“a”、“b”、“c”中的任何一个。\n比如"),t("code",[e._v("/a[123]b/")]),e._v('可以匹配如下三种字符串："a1b"、"a2b"、"a3b"。测试如下：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /a[123]b/g;\nvar string = "a0b a1b a2b a3b a4b";\nconsole.log( string.match(regex) ); \n// => ["a1b", "a2b", "a3b"]\n复制代码\n')])])]),t("p",[e._v("以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。\n接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。")]),e._v(" "),t("h3",{attrs:{id:"_2-字符组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符组"}},[e._v("#")]),e._v(" 2. 字符组")]),e._v(" "),t("p",[e._v("需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如"),t("code",[e._v("[abc]")]),e._v("，表示匹配一个字符，它可以是“a”、“b”、“c”之一。\n"),t("strong",[e._v("2.1 范围表示法")]),e._v("\n如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。\n比如"),t("code",[e._v("[123456abcdefGHIJKLM]")]),e._v("，可以写成"),t("code",[e._v("[1-6a-fG-M]")]),e._v("。用连字符"),t("code",[e._v("-")]),e._v("来省略和简写。\n因为连字符有特殊用途，那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？\n不能写成"),t("code",[e._v("[a-z]")]),e._v("，因为其表示小写字符中的任何一个字符。\n可以写成如下的方式："),t("code",[e._v("[-az]")]),e._v("或"),t("code",[e._v("[az-]")]),e._v("或"),t("code",[e._v("[a\\-z]")]),e._v("。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。\n"),t("strong",[e._v("2.2 排除字符组")]),e._v('\n纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是"a"、"b"、"c"。\n此时就是排除字符组（反义字符组）的概念。例如'),t("code",[e._v("[^abc]")]),e._v('，表示是一个除"a"、"b"、"c"之外的任意一个字符。字符组的第一位放'),t("code",[e._v("^")]),e._v("（脱字符），表示求反的概念。\n当然，也有相应的范围表示法。\n"),t("strong",[e._v("2.3 常见的简写形式")]),e._v("\n有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。")]),e._v(" "),t("blockquote",[t("p",[e._v("**"),t("code",[e._v("\\d")]),e._v("**就是"),t("code",[e._v("[0-9]")]),e._v("。表示是一位数字。记忆方式：其英文是digit（数字）。\n**"),t("code",[e._v("\\D")]),e._v("**就是"),t("code",[e._v("[^0-9]")]),e._v("。表示除数字外的任意字符。\n**"),t("code",[e._v("\\w")]),e._v("**就是"),t("code",[e._v("[0-9a-zA-Z_]")]),e._v("。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。\n**"),t("code",[e._v("\\W")]),e._v("**是"),t("code",[e._v("[^0-9a-zA-Z_]")]),e._v("。非单词字符。\n**"),t("code",[e._v("\\s")]),e._v("**是"),t("code",[e._v("[ \\t\\v\\n\\r\\f]")]),e._v("。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。\n**"),t("code",[e._v("\\S")]),e._v("**是"),t("code",[e._v("[^ \\t\\v\\n\\r\\f]")]),e._v("。 非空白符。\n**"),t("code",[e._v(".")]),e._v("**就是"),t("code",[e._v("[^\\n\\r\\u2028\\u2029]")]),e._v("。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。")])]),e._v(" "),t("p",[e._v("如果要匹配任意字符怎么办？可以使用"),t("code",[e._v("[\\d\\D]")]),e._v("、"),t("code",[e._v("[\\w\\W]")]),e._v("、"),t("code",[e._v("[\\s\\S]")]),e._v("和"),t("code",[e._v("[^]")]),e._v("中任何的一个。")]),e._v(" "),t("h3",{attrs:{id:"_3-量词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-量词"}},[e._v("#")]),e._v(" 3. 量词")]),e._v(" "),t("p",[e._v("量词也称重复。掌握"),t("code",[e._v("{m,n}")]),e._v("的准确含义后，只需要记住一些简写形式。\n"),t("strong",[e._v("3.1 简写形式")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("**{m,}**")]),e._v(" 表示至少出现m次。\n"),t("code",[e._v("**{m}**")]),e._v(" 等价于"),t("code",[e._v("{m,m}")]),e._v("，表示出现m次。\n"),t("code",[e._v("**?**")]),e._v(" 等价于"),t("code",[e._v("{0,1}")]),e._v("，表示出现或者不出现。记忆方式：问号的意思表示，有吗？\n"),t("code",[e._v("**+**")]),e._v("等价于"),t("code",[e._v("{1,}")]),e._v("，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。\n"),t("code",[e._v("*****")]),e._v(" 等价于"),t("code",[e._v("{0,}")]),e._v("，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])]),e._v(" "),t("p",[t("strong",[e._v("3.2 贪婪匹配和惰性匹配")]),e._v("\n看如下的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d{2,5}/g;\nvar string = "123 1234 12345 123456";\nconsole.log( string.match(regex) ); \n// => ["123", "1234", "12345", "12345"]\n复制代码\n')])])]),t("p",[e._v("其中正则"),t("code",[e._v("/\\d{2,5}/")]),e._v("，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。\n但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要5个。你能给我3个，我就3要个。反正只要在能力范围内，越多越好。\n我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d{2,5}?/g;\nvar string = "123 1234 12345 123456";\nconsole.log( string.match(regex) ); \n// => ["12", "12", "34", "12", "34", "12", "34", "56"]\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("/\\d{2,5}?/")]),e._v("表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。\n通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("**{m,n}?**")]),e._v("> "),t("code",[e._v("**{m,}?**")]),e._v("> "),t("code",[e._v("**??**")]),e._v("> "),t("code",[e._v("**+?**")]),e._v("> "),t("code",[e._v("***?**")]),e._v("\n对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？")])]),e._v(" "),t("h3",{attrs:{id:"_4-多选分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-多选分支"}},[e._v("#")]),e._v(" 4. 多选分支")]),e._v(" "),t("p",[e._v("一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。\n具体形式如下："),t("code",[e._v("(p1|p2|p3)")]),e._v("，其中"),t("code",[e._v("p1")]),e._v("、"),t("code",[e._v("p2")]),e._v("和"),t("code",[e._v("p3")]),e._v("是子模式，用"),t("code",[e._v("|")]),e._v('（管道符）分隔，表示其中任何之一。\n例如要匹配"good"和"nice"可以使用'),t("code",[e._v("/good|nice/")]),e._v("。测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /good|nice/g;\nvar string = "good idea, nice try.";\nconsole.log( string.match(regex) ); \n// => ["good", "nice"]\n复制代码\n')])])]),t("p",[e._v("但有个事实我们应该注意，比如我用"),t("code",[e._v("/good|goodbye/")]),e._v('，去匹配"goodbye"字符串时，结果是"good"：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /good|goodbye/g;\nvar string = "goodbye";\nconsole.log( string.match(regex) ); \n// => ["good"]\n复制代码\n')])])]),t("p",[e._v("而把正则改成"),t("code",[e._v("/goodbye|good/")]),e._v("，结果是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /goodbye|good/g;\nvar string = "goodbye";\nconsole.log( string.match(regex) ); \n// => ["goodbye"]\n复制代码\n')])])]),t("p",[e._v("也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。")]),e._v(" "),t("h3",{attrs:{id:"_5-案例分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-案例分析"}},[e._v("#")]),e._v(" 5. 案例分析")]),e._v(" "),t("p",[e._v("匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。\n下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：\n"),t("strong",[e._v("5.1 匹配16进制颜色值")]),e._v("\n要求匹配：")]),e._v(" "),t("blockquote",[t("p",[e._v("#ffbbad\n#Fc01DF\n#FFF\n#ffE")])]),e._v(" "),t("p",[e._v("分析：\n表示一个16进制字符，可以用字符组"),t("code",[e._v("[0-9a-fA-F]")]),e._v("。\n其中字符可以出现3或6次，需要是用量词和分支结构。\n使用分支结构时，需要注意顺序。\n正则如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\nvar string = "#ffbbad #Fc01DF #FFF #ffE";\nconsole.log( string.match(regex) ); \n// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]\n复制代码\n')])])]),t("p",[t("strong",[e._v("5.2 匹配时间")]),e._v("\n以24小时制为例。\n要求匹配：")]),e._v(" "),t("blockquote",[t("p",[e._v("23:59\n02:07")])]),e._v(" "),t("p",[e._v("分析：\n共4位数字，第一位数字可以为"),t("code",[e._v("[0-2]")]),e._v("。\n当第1位为2时，第2位可以为"),t("code",[e._v("[0-3]")]),e._v("，其他情况时，第2位为"),t("code",[e._v("[0-9]")]),e._v("。\n第3位数字为"),t("code",[e._v("[0-5]")]),e._v("，第4位为"),t("code",[e._v("[0-9]")]),e._v("\n正则如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^([01][0-9]|[2][0-3]):[0-5][0-9]$/;\nconsole.log( regex.test("23:59") ); \nconsole.log( regex.test("02:07") ); \n// => true\n// => true复制代码\n')])])]),t("p",[e._v("如果也要求匹配7:9，也就是说时分前面的0可以省略。\n此时正则变成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/;\nconsole.log( regex.test("23:59") ); \nconsole.log( regex.test("02:07") ); \nconsole.log( regex.test("7:9") ); \n// => true\n// => true\n// => true复制代码\n')])])]),t("p",[t("strong",[e._v("5.3 匹配日期")]),e._v("\n比如yyyy-mm-dd格式为例。\n要求匹配：\n2017-06-10\n分析：\n年，四位数字即可，可用"),t("code",[e._v("[0-9]{4}")]),e._v("。\n月，共12个月，分两种情况01、02、……、09和10、11、12，可用"),t("code",[e._v("(0[1-9]|1[0-2])")]),e._v("。\n日，最大31天，可用"),t("code",[e._v("(0[1-9]|[12][0-9]|3[01])")]),e._v("。\n正则如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\nconsole.log( regex.test("2017-06-10") ); \n// => true\n复制代码\n')])])]),t("p",[t("strong",[e._v("5.4 window操作系统文件路径")]),e._v("\n要求匹配：")]),e._v(" "),t("blockquote",[t("p",[e._v("F:\\study\\javascript\\regex\\regular expression.pdf\nF:\\study\\javascript\\regex"),t("br"),e._v("\nF:\\study\\javascript\nF:\\")])]),e._v(" "),t("p",[e._v("分析：\n整体模式是: 盘符:\\文件夹\\文件夹\\文件夹"),t("br"),e._v("\n其中匹配F:\\，需要使用"),t("code",[e._v("[a-zA-Z]:\\\\")]),e._v("，其中盘符不区分大小写，注意"),t("code",[e._v("\\")]),e._v("字符需要转义。\n文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组"),t("code",[e._v('[^\\\\:*<>|"?\\r\\n/]')]),e._v("来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词"),t("code",[e._v("+")]),e._v("。因此匹配“文件夹\\”，可用"),t("code",[e._v('[^\\\\:*<>|"?\\r\\n/]+\\\\')]),e._v("。\n另外“文件夹\\”，可以出现任意次。也就是"),t("code",[e._v('([^\\\\:*<>|"?\\r\\n/]+\\\\)*')]),e._v("。其中括号提供子表达式。\n路径的最后一部分可以是“文件夹”，没有"),t("code",[e._v("\\")]),e._v("，因此需要添加"),t("code",[e._v('([^\\\\:*<>|"?\\r\\n/]+)?')]),e._v("。\n最后拼接成了一个看起来比较复杂的正则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^[a-zA-Z]:\\\\([^\\\\:*<>|"?\\r\\n/]+\\\\)*([^\\\\:*<>|"?\\r\\n/]+)?$/;\nconsole.log( regex.test("F:\\\\study\\\\javascript\\\\regex\\\\regular expression.pdf") ); \nconsole.log( regex.test("F:\\\\study\\\\javascript\\\\regex\\\\") ); \nconsole.log( regex.test("F:\\\\study\\\\javascript") ); \nconsole.log( regex.test("F:\\\\") ); \n// => true\n// => true\n// => true\n// => true复制代码\n')])])]),t("p",[e._v("其中，JS中字符串表示"),t("code",[e._v("\\")]),e._v("时，也要转义。\n"),t("strong",[e._v("5.5 匹配id")]),e._v("\n要求从\n")]),t("div",{staticClass:"main",attrs:{id:"container"}}),e._v('\n提取出id="container"。\n可能最开始想到的正则是：'),t("p"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /id=".*"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]); \n// => id="container" class="main"\n复制代码\n')])])]),t("p",[e._v("因为"),t("code",[e._v(".")]),e._v("是通配符，本身就匹配双引号的，而量词"),t("code",[e._v("*")]),e._v("又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。\n解决之道，可以使用惰性匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /id=".*?"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]); \n// => id="container"\n复制代码\n')])])]),t("p",[e._v("当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /id="[^"]*"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]); \n// => id="container"复制代码\n')])])]),t("h3",{attrs:{id:"第1章-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第1章-小结"}},[e._v("#")]),e._v(" 第1章 小结")]),e._v(" "),t("p",[e._v("字符匹配相关的案例，挺多的，不一而足。\n掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS正则算是入门了。")]),e._v(" "),t("h2",{attrs:{id:"第二章-正则表达式位置匹配攻略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二章-正则表达式位置匹配攻略"}},[e._v("#")]),e._v(" 第二章 正则表达式位置匹配攻略")]),e._v(" "),t("p",[e._v("正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。\n然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。\n本章讲讲正则匹配位置的总总。\n内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("什么是位置？")]),e._v(" "),t("li",[e._v("如何匹配位置？")]),e._v(" "),t("li",[e._v("位置的特性")]),e._v(" "),t("li",[e._v("几个应用实例分析")])]),e._v(" "),t("h3",{attrs:{id:"_1-什么是位置呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是位置呢"}},[e._v("#")]),e._v(" 1. 什么是位置呢？")]),e._v(" "),t("p",[e._v("位置是相邻字符之间的位置。比如，下图中箭头所指的地方：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859849947-a7ffa3c8-750f-4ca3-8ac9-7c3bd10067dc.webp#align=left&display=inline&height=183&originHeight=183&originWidth=564&search=&size=0&status=done&width=564",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-如何匹配位置呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何匹配位置呢"}},[e._v("#")]),e._v(" 2. 如何匹配位置呢？")]),e._v(" "),t("p",[e._v("在ES5中，共有6个锚字符：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("**^**")]),e._v(" > "),t("code",[e._v("**$**")]),e._v(" > "),t("code",[e._v("**\\b**")]),e._v(" > "),t("code",[e._v("**\\B**")]),e._v(" > "),t("code",[e._v("**(?=p)**")]),e._v(" > "),t("code",[e._v("**(?!p)**")]),e._v(" "),t("strong",[e._v("2.1 ^和$")]),e._v(" "),t("code",[e._v("^")]),e._v("（脱字符）匹配开头，在多行匹配中匹配行开头。\n"),t("code",[e._v("$")]),e._v('（美元符号）匹配结尾，在多行匹配中匹配行结尾。\n比如我们把字符串的开头和结尾用"#"替换（位置可以替换成字符的！）：')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "hello".replace(/^|$/g, \'#\');\nconsole.log(result); \n// => "#hello#"\n复制代码\n')])])]),t("p",[e._v("多行匹配模式时，二者是行的概念，这个需要我们的注意：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var result = \"I\\nlove\\njavascript\".replace(/^|$/gm, '#');\nconsole.log(result);\n/*\n#I#\n#love#\n#javascript#\n*/\n复制代码\n")])])]),t("p",[t("strong",[e._v("2.2 \\b和\\B")]),e._v(" "),t("code",[e._v("\\b")]),e._v("是单词边界，具体就是"),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("\\W")]),e._v("之间的位置，也包括"),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("^")]),e._v("之间的位置，也包括"),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("$")]),e._v('之间的位置。\n比如一个文件名是"[JS] Lesson_01.mp4"中的'),t("code",[e._v("\\b")]),e._v("，如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "[JS] Lesson_01.mp4".replace(/\\b/g, \'#\');\nconsole.log(result); \n// => "[#JS#] #Lesson_01#.#mp4#"\n复制代码\n')])])]),t("p",[e._v("为什么是这样呢？这需要仔细看看。\n首先，我们知道，"),t("code",[e._v("\\w")]),e._v("是字符组"),t("code",[e._v("[0-9a-zA-Z_]")]),e._v("的简写形式，即"),t("code",[e._v("\\w")]),e._v("是字母数字或者下划线的中任何一个字符。而"),t("code",[e._v("\\W")]),e._v("是排除字符组"),t("code",[e._v("[^0-9a-zA-Z_]")]),e._v("的简写形式，即"),t("code",[e._v("\\W")]),e._v("是"),t("code",[e._v("\\w")]),e._v('以外的任何一个字符。\n此时我们可以看看"[#JS#] #Lesson_01#.#mp4#"中的每一个"#"，是怎么来的。')]),e._v(" "),t("ul",[t("li",[e._v('第一个"#"，两边是"["与"J"，是'),t("code",[e._v("\\W")]),e._v("和"),t("code",[e._v("\\w")]),e._v("之间的位置。")]),e._v(" "),t("li",[e._v('第二个"#"，两边是"S"与"]"，也就是'),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("\\W")]),e._v("之间的位置。")]),e._v(" "),t("li",[e._v('第三个"#"，两边是空格与"L"，也就是'),t("code",[e._v("\\W")]),e._v("和"),t("code",[e._v("\\w")]),e._v("之间的位置。")]),e._v(" "),t("li",[e._v('第四个"#"，两边是"1"与"."，也就是'),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("\\W")]),e._v("之间的位置。")]),e._v(" "),t("li",[e._v('第五个"#"，两边是"."与"m"，也就是'),t("code",[e._v("\\W")]),e._v("和"),t("code",[e._v("\\w")]),e._v("之间的位置。")]),e._v(" "),t("li",[e._v('第六个"#"，其对应的位置是结尾，但其前面的字符"4"是'),t("code",[e._v("\\w")]),e._v("，即"),t("code",[e._v("\\w")]),e._v("和"),t("code",[e._v("$")]),e._v("之间的位置。")])]),e._v(" "),t("p",[e._v("知道了"),t("code",[e._v("\\b")]),e._v("的概念后，那么"),t("code",[e._v("\\B")]),e._v("也就相对好理解了。\n"),t("code",[e._v("\\B")]),e._v("就是"),t("code",[e._v("\\b")]),e._v("的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉"),t("code",[e._v("\\b")]),e._v("，剩下的都是"),t("code",[e._v("\\B")]),e._v("的。\n具体说来就是"),t("code",[e._v("\\w")]),e._v("与"),t("code",[e._v("\\w")]),e._v("、"),t("code",[e._v("\\W")]),e._v("与"),t("code",[e._v("\\W")]),e._v("、"),t("code",[e._v("^")]),e._v("与"),t("code",[e._v("\\W")]),e._v("，"),t("code",[e._v("\\W")]),e._v("与"),t("code",[e._v("$")]),e._v("之间的位置。\n比如上面的例子，把所有"),t("code",[e._v("\\B")]),e._v('替换成"#"：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "[JS] Lesson_01.mp4".replace(/\\B/g, \'#\');\nconsole.log(result); \n// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.3 (?=p)和(?!p)")]),e._v(" "),t("code",[e._v("(?=p)")]),e._v("，其中"),t("code",[e._v("p")]),e._v("是一个子模式，即"),t("code",[e._v("p")]),e._v("前面的位置。\n比如"),t("code",[e._v("(?=l)")]),e._v("，表示'l'字符前面的位置，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "hello".replace(/(?=l)/g, \'#\');\nconsole.log(result); \n// => "he#l#lo"\n复制代码\n')])])]),t("p",[e._v("而"),t("code",[e._v("(?!p)")]),e._v("就是"),t("code",[e._v("(?=p)")]),e._v("的反面意思，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "hello".replace(/(?!l)/g, \'#\');\nconsole.log(result); \n// => "#h#ell#o#"\n复制代码\n')])])]),t("p",[e._v("二者的学名分别是positive lookahead和negative lookahead。\n中文翻译分别是正向先行断言和负向先行断言。\nES6中，还支持positive lookbehind和negative lookbehind。\n具体是"),t("code",[e._v("(?<=p)")]),e._v("和"),t("code",[e._v("(?<!p)")]),e._v("。\n也有书上把这四个东西，翻译成环视，即看看右边或看看左边。\n但一般书上，没有很好强调这四者是个位置。\n比如"),t("code",[e._v("(?=p)")]),e._v("，一般都理解成：要求接下来的字符与"),t("code",[e._v("p")]),e._v("匹配，但不能包括"),t("code",[e._v("p")]),e._v("的那些字符。\n而在本人看来"),t("code",[e._v("(?=p)")]),e._v("就与"),t("code",[e._v("^")]),e._v("一样好理解，就是"),t("code",[e._v("p")]),e._v("前面的那个位置。")]),e._v(" "),t("h3",{attrs:{id:"_3-位置的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-位置的特性"}},[e._v("#")]),e._v(" 3. 位置的特性")]),e._v(" "),t("p",[e._v('对于位置的理解，我们可以理解成空字符""。\n比如"hello"字符串等价于如下的形式：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"hello" == "" + "h" + "" + "e" + "" + "l" + "" + "l" + "o" + "";\n复制代码\n')])])]),t("p",[e._v("也等价于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"hello" == "" + "" + "hello"\n复制代码\n')])])]),t("p",[e._v("因此，把"),t("code",[e._v("/^hello$/")]),e._v("写成"),t("code",[e._v("/^^hello$$$/")]),e._v("，是没有任何问题的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = /^^hello$$$/.test("hello");\nconsole.log(result); \n// => true\n复制代码\n')])])]),t("p",[e._v("甚至可以写成更复杂的:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = /(?=he)^^he(?=\\w)llo$\\b\\b$/.test("hello");\nconsole.log(result); \n// => true\n复制代码\n')])])]),t("p",[e._v("也就是说字符之间的位置，可以写成多个。\n把位置理解空字符，是对位置非常有效的理解方式。")]),e._v(" "),t("h3",{attrs:{id:"_4-相关案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关案例"}},[e._v("#")]),e._v(" 4. 相关案例")]),e._v(" "),t("p",[t("strong",[e._v("4.1 不匹配任何东西的正则")]),e._v("\n让你写个正则不匹配任何东西\neasy，"),t("code",[e._v("/.^/")]),e._v("\n因为此正则要求只有一个字符，但该字符后面是开头。\n"),t("strong",[e._v("4.2 数字的千位分隔符表示法")]),e._v('\n比如把"12345678"，变成"12,345,678"。\n可见是需要把相应的位置替换成","。\n思路是什么呢？\n'),t("strong",[e._v("4.2.1 弄出最后一个逗号")]),e._v("\n使用"),t("code",[e._v("(?=\\d{3}$)")]),e._v("就可以做到：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "12345678".replace(/(?=\\d{3}$)/g, \',\')\nconsole.log(result); \n// => "12345,678"\n复制代码\n')])])]),t("p",[t("strong",[e._v("4.2.2 弄出所有的逗号")]),e._v("\n因为逗号出现的位置，要求后面3个数字一组，也就是"),t("code",[e._v("\\d{3}")]),e._v("至少出现一次。\n此时可以使用量词"),t("code",[e._v("+")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "12345678".replace(/(?=(\\d{3})+$)/g, \',\')\nconsole.log(result); \n// => "12,345,678"\n复制代码\n')])])]),t("p",[t("strong",[e._v("4.2.3 匹配其余案例")]),e._v("\n写完正则后，要多验证几个案例，此时我们会发现问题：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "123456789".replace(/(?=(\\d{3})+$)/g, \',\')\nconsole.log(result); \n// => ",123,456,789"\n复制代码\n')])])]),t("p",[e._v("因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。\n怎么解决呢？我们要求匹配的到这个位置不能是开头。\n我们知道匹配开头可以使用"),t("code",[e._v("^")]),e._v("，但要求这个位置不是开头怎么办？\neasy，"),t("code",[e._v("(?!^)")]),e._v("，你想到了吗？测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string1 = "12345678",\nstring2 = "123456789";\nreg = /(?!^)(?=(\\d{3})+$)/g;\nvar result = string1.replace(reg, \',\')\nconsole.log(result); \n// => "12,345,678"\nresult = string2.replace(reg, \',\');\nconsole.log(result); \n// => "123,456,789"\n复制代码\n')])])]),t("p",[t("strong",[e._v("4.2.4 支持其他形式")]),e._v('\n如果要把"12345678 123456789"替换成"12,345,678 123,456,789"。\n此时我们需要修改正则，把里面的开头'),t("code",[e._v("^")]),e._v("和结尾"),t("code",[e._v("$")]),e._v("，替换成"),t("code",[e._v("\\b")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "12345678 123456789",\nreg = /(?!\\b)(?=(\\d{3})+\\b)/g;\nvar result = string.replace(reg, \',\')\nconsole.log(result); \n// => "12,345,678 123,456,789"\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("(?!\\b)")]),e._v("怎么理解呢？\n要求当前是一个位置，但不是"),t("code",[e._v("\\b")]),e._v("前面的位置，其实"),t("code",[e._v("(?!\\b)")]),e._v("说的就是"),t("code",[e._v("\\B")]),e._v("。\n因此最终正则变成了："),t("code",[e._v("/\\B(?=(\\d{3})+\\b)/g")]),e._v("。\n"),t("strong",[e._v("4.3 验证密码问题")]),e._v("\n密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。\n此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。\n那么，我们就来挑战一下。看看我们对位置的理解是否深刻。\n"),t("strong",[e._v("4.3.1 简化")]),e._v("\n不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reg = /^[0-9A-Za-z]{6,12}$/;\n复制代码\n")])])]),t("p",[t("strong",[e._v("4.3.2 判断是否包含有某一种字符")]),e._v("\n假设，要求的必须包含数字，怎么办？此时我们可以使用"),t("code",[e._v("(?=.*[0-9])")]),e._v("来做。\n因此正则变成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reg = /(?=.*[0-9])^[0-9A-Za-z]{6,12}$/;\n复制代码\n")])])]),t("p",[t("strong",[e._v("4.3.3 同时包含具体两种字符")]),e._v("\n比如同时包含数字和小写字母，可以用"),t("code",[e._v("(?=.*[0-9])(?=.*[a-z])")]),e._v("来做。\n因此正则变成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reg = /(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]{6,12}$/;\n复制代码\n")])])]),t("p",[t("strong",[e._v("4.3.4 解答")]),e._v("\n我们可以把原题变成下列几种情况之一：")]),e._v(" "),t("ol",[t("li",[e._v("同时包含数字和小写字母")]),e._v(" "),t("li",[e._v("同时包含数字和大写字母")]),e._v(" "),t("li",[e._v("同时包含小写字母和大写字母")]),e._v(" "),t("li",[e._v("同时包含数字、小写字母和大写字母")])]),e._v(" "),t("p",[e._v("以上的4种情况是或的关系（实际上，可以不用第4条）。\n最终答案是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var reg = /((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]{6,12}$/;\nconsole.log( reg.test("1234567") ); // false 全是数字\nconsole.log( reg.test("abcdef") ); // false 全是小写字母\nconsole.log( reg.test("ABCDEFGH") ); // false 全是大写字母\nconsole.log( reg.test("ab23C") ); // false 不足6位\nconsole.log( reg.test("ABCDEF234") ); // true 大写字母和数字\nconsole.log( reg.test("abcdEF234") ); // true 三者都有\n复制代码\n')])])]),t("p",[t("strong",[e._v("4.3.5 解惑")]),e._v("\n上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。\n"),t("code",[e._v("/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/")]),e._v("\n对于这个正则，我们只需要弄明白"),t("code",[e._v("(?=.*[0-9])^")]),e._v("即可。\n分开来看就是"),t("code",[e._v("(?=.*[0-9])")]),e._v("和"),t("code",[e._v("^")]),e._v("。\n表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。\n"),t("code",[e._v("(?=.*[0-9])")]),e._v("表示该位置后面的字符匹配"),t("code",[e._v(".*[0-9]")]),e._v("，即，有任何多个任意字符，后面再跟个数字。\n翻译成大白话，就是接下来的字符，必须包含个数字。\n"),t("strong",[e._v("4.3.6 另外一种解法")]),e._v("\n“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。\n那么要求“不能全部都是数字”，怎么做呢？"),t("code",[e._v("(?!p)")]),e._v("出马！\n对应的正则是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reg = /(?!^[0-9]{6,12}$)^[0-9A-Za-z]{6,12}$/;\n复制代码\n")])])]),t("p",[e._v("三种“都不能”呢？\n最终答案是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var reg = /(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/;\nconsole.log( reg.test("1234567") ); // false 全是数字\nconsole.log( reg.test("abcdef") ); // false 全是小写字母\nconsole.log( reg.test("ABCDEFGH") ); // false 全是大写字母\nconsole.log( reg.test("ab23C") ); // false 不足6位\nconsole.log( reg.test("ABCDEF234") ); // true 大写字母和数字\nconsole.log( reg.test("abcdEF234") ); // true 三者都有\n复制代码\n')])])]),t("h3",{attrs:{id:"第二章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二章小结"}},[e._v("#")]),e._v(" 第二章小结")]),e._v(" "),t("p",[e._v("位置匹配相关的案例，挺多的，不一而足。\n掌握匹配位置的这6个锚字符，给我们解决正则问题一个新工具。")]),e._v(" "),t("h2",{attrs:{id:"第三章-正则表达式括号的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三章-正则表达式括号的作用"}},[e._v("#")]),e._v(" 第三章 正则表达式括号的作用")]),e._v(" "),t("p",[e._v("不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。\n对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。\n括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。\n引用某个分组，会有两种情形：在JavaScript里引用它，在正则表达式里引用它。\n本章内容虽相对简单，但我也要写长点。\n内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("分组和分支结构")]),e._v(" "),t("li",[e._v("捕获分组")]),e._v(" "),t("li",[e._v("反向引用")]),e._v(" "),t("li",[e._v("非捕获分组")]),e._v(" "),t("li",[e._v("相关案例")])]),e._v(" "),t("h3",{attrs:{id:"_1-分组和分支结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-分组和分支结构"}},[e._v("#")]),e._v(" 1. 分组和分支结构")]),e._v(" "),t("p",[e._v("这二者是括号最直觉的作用，也是最原始的功能。\n"),t("strong",[e._v("1.1 分组")]),e._v("\n我们知道"),t("code",[e._v("/a+/")]),e._v("匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用"),t("code",[e._v("/(ab)+/")]),e._v("。\n其中括号是提供分组功能，使量词"),t("code",[e._v("+")]),e._v("作用于“ab”这个整体，测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(ab)+/g;\nvar string = "ababa abbb ababab";\nconsole.log( string.match(regex) ); \n// => ["abab", "ab", "ababab"]\n复制代码\n')])])]),t("p",[t("strong",[e._v("1.2 分支结构")]),e._v("\n而在多选分支结构"),t("code",[e._v("(p1|p2)")]),e._v("中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。\n比如，要匹配如下的字符串：")]),e._v(" "),t("blockquote",[t("p",[e._v("I love JavaScript\nI love Regular Expression")])]),e._v(" "),t("p",[e._v("可以使用正则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^I love (JavaScript|Regular Expression)$/;\nconsole.log( regex.test("I love JavaScript") );\nconsole.log( regex.test("I love Regular Expression") );\n// => true\n// => true复制代码\n')])])]),t("p",[e._v("如果去掉正则中的括号，即"),t("code",[e._v("/^I love JavaScript|Regular Expression$/")]),e._v('，匹配字符串是"I love JavaScript"和"Regular Expression"，当然这不是我们想要的。')]),e._v(" "),t("h3",{attrs:{id:"_2-引用分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用分组"}},[e._v("#")]),e._v(" 2. 引用分组")]),e._v(" "),t("p",[e._v("这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。\n而要使用它带来的好处，必须配合使用实现环境的API。\n以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /\\d{4}-\\d{2}-\\d{2}/;\n复制代码\n")])])]),t("p",[e._v("然后再修改成括号版的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n复制代码\n")])])]),t("p",[e._v("为什么要使用这个正则呢？\n"),t("strong",[e._v("2.1 提取数据")]),e._v("\n比如提取出年、月、日，可以这么做：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nconsole.log( string.match(regex) ); \n// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]\n复制代码\n')])])]),t("p",[t("code",[e._v("match")]),e._v("返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符"),t("code",[e._v("g")]),e._v("，"),t("code",[e._v("match")]),e._v("返回的数组格式是不一样的）。\n另外也可以使用正则对象的"),t("code",[e._v("exec")]),e._v("方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nconsole.log( regex.exec(string) ); \n// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]\n复制代码\n')])])]),t("p",[e._v("同时，也可以使用构造函数的全局属性"),t("code",[e._v("$1")]),e._v("至"),t("code",[e._v("$9")]),e._v("来获取：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nregex.test(string); // 正则操作即可，例如\n//regex.exec(string);\n//string.match(regex);\nconsole.log(RegExp.$1); // "2017"\nconsole.log(RegExp.$2); // "06"\nconsole.log(RegExp.$3); // "12"\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.2 替换")]),e._v("\n比如，想把yyyy-mm-dd格式，替换成mm/dd/yyyy怎么做？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, "$2/$3/$1");\nconsole.log(result); \n// => "06/12/2017"\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("replace")]),e._v("中的，第二个参数里用"),t("code",[e._v("$1")]),e._v("、"),t("code",[e._v("$2")]),e._v("、"),t("code",[e._v("$3")]),e._v("指代相应的分组。等价于如下的形式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, function() {\n\treturn RegExp.$2 + "/" + RegExp.$3 + "/" + RegExp.$1;\n});\nconsole.log(result); \n// => "06/12/2017"\n复制代码\n')])])]),t("p",[e._v("也等价于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, function(match, year, month, day) {\n\treturn month + "/" + day + "/" + year;\n});\nconsole.log(result); \n// => "06/12/2017"\n复制代码\n')])])]),t("h3",{attrs:{id:"_3-反向引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-反向引用"}},[e._v("#")]),e._v(" 3. 反向引用")]),e._v(" "),t("p",[e._v("除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。\n还是以日期为例。\n比如要写一个正则支持匹配如下三种格式：")]),e._v(" "),t("blockquote",[t("p",[e._v("2016-06-12\n2016/06/12\n2016.06.12")])]),e._v(" "),t("p",[e._v("最先可能想到的正则是:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // true\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("/")]),e._v("和"),t("code",[e._v(".")]),e._v('需要转义。虽然匹配了要求的情况，但也匹配"2016-06/12"这样的数据。\n假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // false\n复制代码\n')])])]),t("p",[e._v("注意里面的"),t("code",[e._v("\\1")]),e._v("，表示的引用之前的那个分组"),t("code",[e._v("(-|\\/|\\.)")]),e._v("。不管它匹配到什么（比如-），"),t("code",[e._v("\\1")]),e._v("都匹配那个同样的具体某个字符。\n我们知道了"),t("code",[e._v("\\1")]),e._v("的含义后，那么"),t("code",[e._v("\\2")]),e._v("和"),t("code",[e._v("\\3")]),e._v("的概念也就理解了，即分别指代第二个和第三个分组。\n看到这里，此时，恐怕你会有三个问题。\n"),t("strong",[e._v("3.1 括号嵌套怎么办？")]),e._v("\n以左括号（开括号）为准。比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^((\\d)(\\d(\\d)))\\1\\2\\3\\4$/;\nvar string = "1231231233";\nconsole.log( regex.test(string) ); // true\nconsole.log( RegExp.$1 ); // 123\nconsole.log( RegExp.$2 ); // 1\nconsole.log( RegExp.$3 ); // 23\nconsole.log( RegExp.$4 ); // 3\n复制代码\n')])])]),t("p",[e._v("我们可以看看这个正则匹配模式：")]),e._v(" "),t("ul",[t("li",[e._v("第一个字符是数字，比如说1，")]),e._v(" "),t("li",[e._v("第二个字符是数字，比如说2，")]),e._v(" "),t("li",[e._v("第三个字符是数字，比如说3，")]),e._v(" "),t("li",[e._v("接下来的是"),t("code",[e._v("\\1")]),e._v("，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，")]),e._v(" "),t("li",[e._v("接下来的是"),t("code",[e._v("\\2")]),e._v("，找到第2个开括号，对应的分组，匹配的内容是1，")]),e._v(" "),t("li",[e._v("接下来的是"),t("code",[e._v("\\3")]),e._v("，找到第3个开括号，对应的分组，匹配的内容是23，")]),e._v(" "),t("li",[e._v("最后的是"),t("code",[e._v("\\4")]),e._v("，找到第3个开括号，对应的分组，匹配的内容是3。")])]),e._v(" "),t("p",[e._v("这个问题，估计仔细看一下，就该明白了。\n"),t("strong",[e._v("3.2 \\10表示什么呢？")]),e._v("\n另外一个疑问可能是，即"),t("code",[e._v("\\10")]),e._v("是表示第10个分组，还是"),t("code",[e._v("\\1")]),e._v("和"),t("code",[e._v("0")]),e._v("呢？\n答案是前者，虽然一个正则里出现"),t("code",[e._v("\\10")]),e._v("比较罕见。测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \\10+/;\nvar string = "123456789# ######"\nconsole.log( regex.test(string) );\n// => true复制代码\n')])])]),t("p",[t("strong",[e._v("3.3 引用不存在的分组会怎样？")]),e._v("\n因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如"),t("code",[e._v("\\2")]),e._v('，就匹配"\\2"。注意"\\2"表示对"2"进行了转意。')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\1\\2\\3\\4\\5\\6\\7\\8\\9/;\nconsole.log( regex.test("\\1\\2\\3\\4\\5\\6\\7\\8\\9") ); \nconsole.log( "\\1\\2\\3\\4\\5\\6\\7\\8\\9".split("") );\n复制代码\n')])])]),t("p",[e._v("chrome浏览器打印的结果：")]),e._v(" "),t("h3",{attrs:{id:"_4-非捕获分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-非捕获分组"}},[e._v("#")]),e._v(" 4. 非捕获分组")]),e._v(" "),t("p",[e._v("之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。\n如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组"),t("code",[e._v("(?:p)")]),e._v("，例如本文第一个例子可以修改为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /(?:ab)+/g;\nvar string = "ababa abbb ababab";\nconsole.log( string.match(regex) ); \n// => ["abab", "ab", "ababab"]\n复制代码\n')])])]),t("h3",{attrs:{id:"_5-相关案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-相关案例"}},[e._v("#")]),e._v(" 5. 相关案例")]),e._v(" "),t("p",[e._v("至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。\n"),t("strong",[e._v("5.1 字符串trim方法模拟")]),e._v(" "),t("code",[e._v("trim")]),e._v("方法是去掉字符串的开头和结尾的空白符。有两种思路去做。\n第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function trim(str) {\n\treturn str.replace(/^\\s+|\\s+$/g, \'\');\n}\nconsole.log( trim("  foobar   ") ); \n// => "foobar"\n复制代码\n')])])]),t("p",[e._v("第二种，匹配整个字符串，然后用引用来提取出相应的数据：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function trim(str) {\n\treturn str.replace(/^\\s*(.*?)\\s*$/g, "$1");\n}\nconsole.log( trim("  foobar   ") ); \n// => "foobar"\n复制代码\n')])])]),t("p",[e._v("这里使用了惰性匹配"),t("code",[e._v("*?")]),e._v("，不然也会匹配最后一个空格之前的所有空格的。\n当然，前者效率高。\n"),t("strong",[e._v("5.2 将每个单词的首字母转换为大写")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function titleize(str) {\n\treturn str.toLowerCase().replace(/(?:^|\\s)\\w/g, function(c) {\n\t\treturn c.toUpperCase();\n\t});\n}\nconsole.log( titleize('my name is epeli') ); \n// => \"My Name Is Epeli\"\n复制代码\n")])])]),t("p",[e._v("思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。\n"),t("strong",[e._v("5.3 驼峰化")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function camelize(str) {\n\treturn str.replace(/[-_\\s]+(.)?/g, function(match, c) {\n\t\treturn c ? c.toUpperCase() : '';\n\t});\n}\nconsole.log( camelize('-moz-transform') ); \n// => \"MozTransform\"\n复制代码\n")])])]),t("p",[e._v("其中分组"),t("code",[e._v("(.)")]),e._v("表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对"),t("code",[e._v("str")]),e._v("尾部的字符可能不是单词字符，比如"),t("code",[e._v("str")]),e._v("是'-moz-transform    '。\n"),t("strong",[e._v("5.4 中划线化")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function dasherize(str) {\n\treturn str.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n}\nconsole.log( dasherize('MozTransform') ); \n// => \"-moz-transform\"\n复制代码\n")])])]),t("p",[e._v("驼峰化的逆过程。\n"),t("strong",[e._v("5.5 html转义和反转义")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 将HTML特殊字符转换成等值的实体\nfunction escapeHTML(str) {\n\tvar escapeChars = {\n\t  '¢' : 'cent',\n\t  '£' : 'pound',\n\t  '¥' : 'yen',\n\t  '€': 'euro',\n\t  '©' :'copy',\n\t  '®' : 'reg',\n\t  '<' : 'lt',\n\t  '>' : 'gt',\n\t  '\"' : 'quot',\n\t  '&' : 'amp',\n\t  '\\'' : '#39'\n\t};\n\treturn str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'), function(match) {\n\t\treturn '&' + escapeChars[match] + ';';\n\t});\n}\nconsole.log( escapeHTML('<div>Blah blah blah</div>') );\n// => \"&lt;div&gt;Blah blah blah&lt;/div&gt\";\n复制代码\n")])])]),t("p",[e._v("其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。\n倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 实体字符转换为等值的HTML。\nfunction unescapeHTML(str) {\n\tvar htmlEntities = {\n\t  nbsp: ' ',\n\t  cent: '¢',\n\t  pound: '£',\n\t  yen: '¥',\n\t  euro: '€',\n\t  copy: '©',\n\t  reg: '®',\n\t  lt: '<',\n\t  gt: '>',\n\t  quot: '\"',\n\t  amp: '&',\n\t  apos: '\\''\n\t};\n\treturn str.replace(/\\&([^;]+);/g, function(match, key) {\n\t\tif (key in htmlEntities) {\n\t\t\treturn htmlEntities[key];\n\t\t}\n\t\treturn match;\n\t});\n}\nconsole.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );\n// => \"<div>Blah blah blah</div>\"\n复制代码\n")])])]),t("p",[e._v("通过"),t("code",[e._v("key")]),e._v("获取相应的分组引用，然后作为对象的键。\n"),t("strong",[e._v("5.6 匹配成对标签")]),e._v("\n要求匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> <title>regular expression</title>\n> <p>laoyao bye bye</p>\n")])])]),t("p",[e._v("不匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<title>wrong!</p>\n匹配一个开标签，可以使用正则`<[^>]+>`，\n匹配一个闭标签，可以使用`<\\/[^>]+>`，\n")])])]),t("p",[e._v("但是要求匹配成对标签，那就需要使用反向引用，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\nvar string1 = "<title>regular expression</title>";\nvar string2 = "<p>laoyao bye bye</p>";\nvar string3 = "<title>wrong!</p>";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // false\n复制代码\n')])])]),t("p",[e._v("其中开标签"),t("code",[e._v("<[^>]+>")]),e._v("改成"),t("code",[e._v("<([^>]+)>")]),e._v("，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，"),t("code",[e._v("<\\/\\1>")]),e._v("。\n另外"),t("code",[e._v("[\\d\\D]")]),e._v("的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。")]),e._v(" "),t("h3",{attrs:{id:"第三章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三章小结"}},[e._v("#")]),e._v(" 第三章小结")]),e._v(" "),t("p",[e._v("正则中使用括号的例子那可是太多了，不一而足。\n重点理解括号可以提供分组，我们可以提取数据，应该就可以了。\n例子中的代码，基本没做多少分析，相信你都能看懂的。")]),e._v(" "),t("h2",{attrs:{id:"第4章-正则表达式回溯法原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第4章-正则表达式回溯法原理"}},[e._v("#")]),e._v(" 第4章 正则表达式回溯法原理")]),e._v(" "),t("p",[e._v("学习正则表达式，是需要懂点儿匹配原理的。\n而研究匹配原理时，有两个字出现的频率比较高：“回溯”。\n听起来挺高大上，确实还有很多人对此不明不白的。\n因此，本章就简单扼要地说清楚回溯到底是什么东西。\n内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("没有回溯的匹配")]),e._v(" "),t("li",[e._v("有回溯的匹配")]),e._v(" "),t("li",[e._v("常见的回溯形式")])]),e._v(" "),t("h3",{attrs:{id:"_1-没有回溯的匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-没有回溯的匹配"}},[e._v("#")]),e._v(" 1. 没有回溯的匹配")]),e._v(" "),t("p",[e._v("假设我们的正则是"),t("code",[e._v("/ab{1,3}c/")]),e._v("，其可视化形式是：")]),e._v(" "),t("p",[e._v('而当目标字符串是"abbbc"时，就没有所谓的“回溯”。其匹配过程是：')]),e._v(" "),t("p",[e._v("其中子表达式"),t("code",[e._v("b{1,3}")]),e._v("表示“b”字符连续出现1到3次。")]),e._v(" "),t("h3",{attrs:{id:"_2-有回溯的匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-有回溯的匹配"}},[e._v("#")]),e._v(" 2. 有回溯的匹配")]),e._v(" "),t("p",[e._v('如果目标字符串是"abbc"，中间就有回溯。')]),e._v(" "),t("p",[e._v("图中第5步有红颜色，表示匹配不成功。此时"),t("code",[e._v("b{1,3}")]),e._v("已经匹配到了2个字符“b”，准备尝试第三个时，结果发现接下来的字符是“c”。那么就认为"),t("code",[e._v("b{1,3}")]),e._v("就已经匹配完毕。然后状态又回到之前的状态（即第6步，与第4步一样），最后再用子表达式"),t("code",[e._v("c")]),e._v("，去匹配字符“c”。当然，此时整个表达式匹配成功了。\n图中的第6步，就是“回溯”。\n你可能对此没有感觉，这里我们再举一个例子。正则是：")]),e._v(" "),t("p",[e._v('目标字符串是"abbbc"，匹配过程是：')]),e._v(" "),t("p",[e._v("其中第7步和第10步是回溯。第7步与第4步一样，此时"),t("code",[e._v("b{1,3}")]),e._v('匹配了两个"b"，而第10步与第3步一样，此时'),t("code",[e._v("b{1,3}")]),e._v('只匹配了一个"b"，这也是'),t("code",[e._v("b{1,3}")]),e._v("的最终匹配结果。\n这里再看一个清晰的回溯，正则是：")]),e._v(" "),t("p",[e._v('目标字符串是："acd"ef，匹配过程是：\n'),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859849952-5ed69163-d6e4-46bb-bb80-89f5a7d9b886.webp#align=left&display=inline&height=583&originHeight=583&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n图中省略了尝试匹配双引号失败的过程。可以看出"),t("code",[e._v(".*")]),e._v("是非常影响效率的。\n为了减少一些不必要的回溯，可以把正则修改为"),t("code",[e._v('/"[^"]*"/')]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_3-常见的回溯形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见的回溯形式"}},[e._v("#")]),e._v(" 3. 常见的回溯形式")]),e._v(" "),t("p",[e._v("正则表达式匹配字符串的这种方式，有个学名，叫回溯法。\n回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（copy于百度百科）。\n本质上就是深度优先搜索算法。**其中退到之前的某一步这一过程，我们称为“回溯”。**从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，"),t("strong",[e._v("尝试匹配失败时，接下来的一步通常就是回溯。")]),e._v("\n道理，我们是懂了。那么JS中正则表达式会产生回溯的地方都有哪些呢？\n"),t("strong",[e._v("3.1 贪婪量词")]),e._v("\n之前的例子都是贪婪量词相关的。比如"),t("code",[e._v("b{1,3}")]),e._v('，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试"bbb"，然后再看整个正则是否能匹配。不能匹配时，吐出一个"b"，即在"bb"的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。\n虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？\n此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？\n答案是，先下手为强！因为深度优先搜索。测试如下：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "12345";\nvar regex = /(\\d{1,3})(\\d{1,3})/;\nconsole.log( string.match(regex) );\n// => ["12345", "123", "45", index: 0, input: "12345"]\n复制代码\n')])])]),t("p",[e._v("其中，前面的"),t("code",[e._v("\\d{1,3}")]),e._v('匹配的是"123"，后面的'),t("code",[e._v("\\d{1,3}")]),e._v('匹配的是"45"。\n'),t("strong",[e._v("3.2 惰性量词")]),e._v("\n惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "12345";\nvar regex = /(\\d{1,3}?)(\\d{1,3})/;\nconsole.log( string.match(regex) );\n// => ["1234", "1", "234", index: 0, input: "12345"]\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("\\d{1,3}?")]),e._v('只匹配到一个字符"1"，而后面的'),t("code",[e._v("\\d{1,3}")]),e._v('匹配了"234"。\n虽然惰性量词不贪，但也会有回溯的现象。比如正则是：')]),e._v(" "),t("p",[e._v('目标字符串是"12345"，匹配过程是：')]),e._v(" "),t("p",[e._v("知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后"),t("code",[e._v("\\d{1,3}?")]),e._v('匹配的字符是"12"，是两个数字，而不是一个。\n3.3 '),t("strong",[e._v("分支结构")]),e._v("\n我们知道分支也是惰性的，比如"),t("code",[e._v("/can|candy/")]),e._v('，去匹配字符串"candy"，得到的结果是"can"，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。\n分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。\n比如正则：')]),e._v(" "),t("p",[e._v('目标字符串是"candy"，匹配过程：\n'),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859849961-39f6505e-3f8e-4697-9c14-8b5ec9b2c5fa.webp#align=left&display=inline&height=512&originHeight=512&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。")]),e._v(" "),t("h3",{attrs:{id:"第四章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四章小结"}},[e._v("#")]),e._v(" 第四章小结")]),e._v(" "),t("p",[e._v("其实回溯法，很容易掌握的。\n简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。")]),e._v(" "),t("ol",[t("li",[e._v("贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。")]),e._v(" "),t("li",[e._v("惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。")]),e._v(" "),t("li",[e._v("分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。")])]),e._v(" "),t("p",[e._v("既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些DFA引擎。\n而JS的正则引擎是NFA，NFA是“非确定型有限自动机”的简写。\n大部分语言中的正则都是NFA，为啥它这么流行呢？\n答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。")]),e._v(" "),t("h2",{attrs:{id:"第5章-正则表达式的拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第5章-正则表达式的拆分"}},[e._v("#")]),e._v(" 第5章 正则表达式的拆分")]),e._v(" "),t("p",[e._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。\n不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。\n正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。\n如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。\n本章就解决这一问题，内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("结构和操作符")]),e._v(" "),t("li",[e._v("注意要点")]),e._v(" "),t("li",[e._v("案例分析")])]),e._v(" "),t("h3",{attrs:{id:"_1-结构和操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-结构和操作符"}},[e._v("#")]),e._v(" 1. 结构和操作符")]),e._v(" "),t("p",[e._v("编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。\n而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。\nJS正则表达式中，都有哪些结构呢？\n字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。\n具体含义简要回顾如下（如懂，可以略去不看）：")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("字面量")]),e._v('，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符"a"，又比如'),t("code",[e._v("\\n")]),e._v("匹配换行符，又比如"),t("code",[e._v("\\.")]),e._v("匹配小数点。\n"),t("strong",[e._v("字符组")]),e._v("，匹配一个字符，可以是多种可能之一，比如"),t("code",[e._v("[0-9]")]),e._v("，表示匹配一个数字。也有"),t("code",[e._v("\\d")]),e._v("的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如"),t("code",[e._v("[^0-9]")]),e._v("，表示一个非数字字符，也有"),t("code",[e._v("\\D")]),e._v("的简写形式。\n"),t("strong",[e._v("量词")]),e._v("，表示一个字符连续出现，比如"),t("code",[e._v("a{1,3}")]),e._v("表示“a”字符连续出现3次。另外还有常见的简写形式，比如"),t("code",[e._v("a+")]),e._v("表示“a”字符连续出现至少一次。\n"),t("strong",[e._v("锚点")]),e._v("，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如"),t("code",[e._v("\\b")]),e._v("匹配单词边界，又比如"),t("code",[e._v("(?=\\d)")]),e._v("表示数字前面的位置。\n"),t("strong",[e._v("分组")]),e._v("，用括号表示一个整体，比如"),t("code",[e._v("(ab)+")]),e._v('，表示"ab"两个字符连续出现多次，也可以使用非捕获分组'),t("code",[e._v("(?:ab)+")]),e._v("。\n"),t("strong",[e._v("分支")]),e._v("，多个子表达式多选一，比如"),t("code",[e._v("abc|bcd")]),e._v('，表达式匹配"abc"或者"bcd"字符子串。\n'),t("strong",[e._v("反向引用")]),e._v("，比如"),t("code",[e._v("\\2")]),e._v("，表示引用第2个分组。")])]),e._v(" "),t("p",[e._v("其中涉及到的操作符有：\n1.转义符 > "),t("code",[e._v("\\")]),e._v("2.括号和方括号 > "),t("code",[e._v("(...)")]),e._v("、> "),t("code",[e._v("(?:...)")]),e._v("、> "),t("code",[e._v("(?=...)")]),e._v("、> "),t("code",[e._v("(?!...)")]),e._v("、> "),t("code",[e._v("[...]")]),e._v("3.量词限定符 > "),t("code",[e._v("{m}")]),e._v("、> "),t("code",[e._v("{m,n}")]),e._v("、> "),t("code",[e._v("{m,}")]),e._v("、> "),t("code",[e._v("?")]),e._v("、> "),t("code",[e._v("*")]),e._v("、> "),t("code",[e._v("+")]),e._v("4.位置和序列 > "),t("code",[e._v("^")]),e._v(" 、> "),t("code",[e._v("$")]),e._v("、 > "),t("code",[e._v("\\元字符")]),e._v("、 > "),t("code",[e._v("一般字符")]),e._v("5. 管道符（竖杠）> "),t("code",[e._v("|")]),e._v("\n上面操作符的优先级从上至下，由高到低。\n这里，我们来分析一个正则：\n"),t("code",[e._v("/ab?(c|de*)+|fg/")])]),e._v(" "),t("ol",[t("li",[e._v("由于括号的存在，所以，"),t("code",[e._v("(c|de*)")]),e._v("是一个整体结构。")]),e._v(" "),t("li",[e._v("在"),t("code",[e._v("(c|de*)")]),e._v("中，注意其中的量词"),t("code",[e._v("*")]),e._v("，因此"),t("code",[e._v("e*")]),e._v("是一个整体结构。")]),e._v(" "),t("li",[e._v("又因为分支结构“|”优先级最低，因此"),t("code",[e._v("c")]),e._v("是一个整体、而"),t("code",[e._v("de*")]),e._v("是另一个整体。")]),e._v(" "),t("li",[e._v("同理，整个正则分成了 "),t("code",[e._v("a")]),e._v("、"),t("code",[e._v("b?")]),e._v("、"),t("code",[e._v("(...)+")]),e._v("、"),t("code",[e._v("f")]),e._v("、"),t("code",[e._v("g")]),e._v("。而由于分支的原因，又可以分成"),t("code",[e._v("ab?(c|de*)+")]),e._v("和"),t("code",[e._v("fg")]),e._v("这两部分。")])]),e._v(" "),t("p",[e._v("希望你没被我绕晕，上面的分析可用其"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjex.im%2Fregulex%2F%2523%2521embed%253Dfalse%2526flags%253D%2526re%253Dab%25253F%2528c%25257Cde%252A%2529%25252B%25257Cfg",target:"_blank",rel:"noopener noreferrer"}},[e._v("可视化"),t("OutboundLink")],1),e._v("形式描述如下：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859849965-5a409444-cace-4580-af4e-2dc9a9e81d43.webp#align=left&display=inline&height=284&originHeight=284&originWidth=466&search=&size=0&status=done&width=466",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2-注意要点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意要点"}},[e._v("#")]),e._v(" 2. 注意要点")]),e._v(" "),t("p",[e._v("关于结构和操作符，还是有几点需要强调：\n"),t("strong",[e._v("2.1 匹配字符串整体问题")]),e._v("\n因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v('。\n比如要匹配目标字符串"abc"或者"bcd"时，如果一不小心，就会写成'),t("code",[e._v("/^abc|bcd$/")]),e._v("。\n而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859850035-76c39bfa-9ad5-4471-be35-ca1596067fb4.webp#align=left&display=inline&height=121&originHeight=121&originWidth=244&search=&size=0&status=done&width=244",alt:""}}),e._v("\n应该修改成:")]),e._v(" "),t("p",[t("strong",[e._v("2.2 量词连缀问题")]),e._v("\n假设，要匹配这样的字符串：")]),e._v(" "),t("blockquote",[t("ol",[t("li",[e._v("每个字符为a、b、c任选其一")]),e._v(" "),t("li",[e._v("字符串的长度是3的倍数")])])]),e._v(" "),t("p",[e._v("此时正则不能想当然地写成"),t("code",[e._v("/^[abc]{3}+$/")]),e._v("，这样会报错，说"),t("code",[e._v("+")]),e._v("前面没什么可重复的：")]),e._v(" "),t("p",[e._v("此时要修改成：")]),e._v(" "),t("p",[t("strong",[e._v("2.3 元字符转义问题")]),e._v("\n所谓元字符，就是正则中有特殊含义的字符。\n所有结构里，用到的元字符总结如下：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("**^**")]),e._v("> ** **> "),t("code",[e._v("**$**")]),e._v("> ** **> "),t("code",[e._v("**.**")]),e._v("> ** **> "),t("code",[e._v("*****")]),e._v("> ** **> "),t("code",[e._v("**+**")]),e._v("> ** **> "),t("code",[e._v("**?**")]),e._v("> ** **> "),t("code",[e._v("**|**")]),e._v("> ** **> "),t("code",[e._v("**\\**")]),e._v("> ** **> "),t("code",[e._v("**/**")]),e._v("> ** **> "),t("code",[e._v("**(**")]),e._v("> ** **> "),t("code",[e._v("**)**")]),e._v("> ** **> "),t("code",[e._v("**[**")]),e._v("> ** **> "),t("code",[e._v("**]**")]),e._v("> ** **> "),t("code",[e._v("**{**")]),e._v("> ** **> "),t("code",[e._v("**}**")]),e._v("> ** **> "),t("code",[e._v("**=**")]),e._v("> ** **> "),t("code",[e._v("**!**")]),e._v("> ** **> "),t("code",[e._v("**:**")]),e._v("> ** **> "),t("code",[e._v("**-**")]),e._v("> ** **> "),t("code",[e._v("**,**")]),e._v("\n当匹配上面的字符本身时，可以一律转义：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "^$.*+?|\\\\/[]{}=!:-,";\nvar regex = /\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,/;\nconsole.log( regex.test(string) ); \n// => true\n复制代码\n')])])]),t("p",[e._v("其中"),t("code",[e._v("string")]),e._v("中的"),t("code",[e._v("\\")]),e._v("字符也要转义的。\n另外，在"),t("code",[e._v("string")]),e._v("中，也可以把每个字符转义，当然，转义后的结果仍是本身：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "^$.*+?|\\\\/[]{}=!:-,";\nvar string2 = "\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,";\nconsole.log( string == string2 ); \n// => true\n复制代码\n')])])]),t("p",[e._v("现在的问题是，是不是每个字符都需要转义呢？否，看情况。\n"),t("strong",[e._v("2.3.1 字符组中的元字符")]),e._v("\n跟字符组相关的元字符有"),t("code",[e._v("[]")]),e._v("、"),t("code",[e._v("^")]),e._v("、"),t("code",[e._v("-")]),e._v("。因此在会引起歧义的地方进行转义。例如开头的"),t("code",[e._v("^")]),e._v("必须转义，不然会把整个字符组，看成反义字符组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "^$.*+?|\\\\/[]{}=!:-,";\nvar regex = /[\\^$.*+?|\\\\/\\[\\]{}=!:\\-,]/g;\nconsole.log( string.match(regex) );\n// => ["^", "$", ".", "*", "+", "?", "|", "\\", "/", "[", "]", "{", "}", "=", "!", ":", "-", ","]\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.3.2 匹配“[abc]”和“{3,5}”")]),e._v("\n我们知道"),t("code",[e._v("[abc]")]),e._v('，是个字符组。如果要匹配字符串"[abc]"时，该怎么办？\n可以写成'),t("code",[e._v("/\\[abc\\]/")]),e._v("，也可以写成"),t("code",[e._v("/\\[abc]/")]),e._v("，测试如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "[abc]";\nvar regex = /\\[abc]/g;\nconsole.log( string.match(regex)[0] ); \n// => "[abc]"\n复制代码\n')])])]),t("p",[e._v('只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。\n同理，要匹配字符串"{3,5}"，只需要把正则写成'),t("code",[e._v("/\\{3,5}/")]),e._v("即可。\n另外，我们知道量词有简写形式"),t("code",[e._v("{m,}")]),e._v("，却没有"),t("code",[e._v("{,n}")]),e._v('的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是"{,n}"，测试如下：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "{,3}";\nvar regex = /{,3}/g;\nconsole.log( string.match(regex)[0] ); \n// => "{,3}"\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.3.3 其余情况")]),e._v("\n比如"),t("code",[e._v("=")]),e._v(" "),t("code",[e._v("!")]),e._v(" "),t("code",[e._v(":")]),e._v(" "),t("code",[e._v("-")]),e._v(" "),t("code",[e._v(",")]),e._v("等符号，只要不在特殊结构中，也不需要转义。\n但是，括号需要前后都转义的，如"),t("code",[e._v("/\\(123\\)/")]),e._v("。\n至于剩下的"),t("code",[e._v("^")]),e._v(" "),t("code",[e._v("$")]),e._v(" "),t("code",[e._v(".")]),e._v(" "),t("code",[e._v("*")]),e._v(" "),t("code",[e._v("+")]),e._v(" "),t("code",[e._v("?")]),e._v(" "),t("code",[e._v("|")]),e._v(" "),t("code",[e._v("\\")]),e._v(" "),t("code",[e._v("/")]),e._v("等字符，只要不在字符组内，都需要转义的。")]),e._v(" "),t("h3",{attrs:{id:"_3-案例分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例分析"}},[e._v("#")]),e._v(" 3. 案例分析")]),e._v(" "),t("p",[e._v("接下来分析两个例子，一个简单的，一个复杂的。\n"),t("strong",[e._v("3.1 身份证")]),e._v("\n正则表达式是：\n"),t("code",[e._v("/^(\\d{15}|\\d{17}[\\dxX])$/")]),e._v("\n因为竖杠“|”,的优先级最低，所以正则分成了两部分"),t("code",[e._v("\\d{15}")]),e._v("和"),t("code",[e._v("\\d{17}[\\dxX]")]),e._v("。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("\\d{15}")]),e._v("表示15位连续数字。")]),e._v(" "),t("li",[t("code",[e._v("\\d{17}[\\dxX]")]),e._v('表示17位连续数字，最后一位可以是数字可以大小写字母"x"。')])]),e._v(" "),t("p",[e._v("可视化如下：")]),e._v(" "),t("p",[t("strong",[e._v("3.2 IPV4地址")]),e._v("\n正则表达式是：\n"),t("code",[e._v("/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/")]),e._v("\n这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：\n"),t("code",[e._v("((...)\\.){3}(...)")]),e._v("\n上面的两个"),t("code",[e._v("(...)")]),e._v("是一样的结构。表示匹配的是3位数字。因此整个结构是\n3位数.3位数.3位数.3位数\n然后再来分析"),t("code",[e._v("(...)")]),e._v("：\n"),t("code",[e._v("(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])")]),e._v("\n它是一个多选结构，分成5个部分：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("0{0,2}\\d")]),e._v("，匹配一位数，包括0补齐的。比如，9、09、009；")]),e._v(" "),t("li",[t("code",[e._v("0?\\d{2}")]),e._v("，匹配两位数，包括0补齐的，也包括一位数；")]),e._v(" "),t("li",[t("code",[e._v("1\\d{2}")]),e._v("，匹配100到199;")]),e._v(" "),t("li",[t("code",[e._v("2[0-4]\\d")]),e._v("，匹配200-249；")]),e._v(" "),t("li",[t("code",[e._v("25[0-5]")]),e._v("，匹配250-255。")])]),e._v(" "),t("p",[e._v("最后来看一下其可视化形式：")]),e._v(" "),t("h3",{attrs:{id:"第五章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第五章小结"}},[e._v("#")]),e._v(" 第五章小结")]),e._v(" "),t("p",[e._v("掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。\n至于例子，不一而足，没有写太多。\n这里稍微总结一下，竖杠的优先级最低，即最后运算。\n只要知道这一点，就能读懂大部分正则。\n另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。")]),e._v(" "),t("h2",{attrs:{id:"第6章-正则表达式的构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第6章-正则表达式的构建"}},[e._v("#")]),e._v(" 第6章 正则表达式的构建")]),e._v(" "),t("p",[e._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。\n不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。\n与“读”相比，“写”往往更为重要，这个道理是不言而喻的。\n对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？\n本章就解决该问题，内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("平衡法则")]),e._v(" "),t("li",[e._v("构建正则前提")]),e._v(" "),t("li",[e._v("准确性")]),e._v(" "),t("li",[e._v("效率")])]),e._v(" "),t("h3",{attrs:{id:"_1-平衡法则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-平衡法则"}},[e._v("#")]),e._v(" 1. 平衡法则")]),e._v(" "),t("p",[e._v("构建正则有一点非常重要，需要做到下面几点的平衡：")]),e._v(" "),t("ol",[t("li",[e._v("匹配预期的字符串")]),e._v(" "),t("li",[e._v("不匹配非预期的字符串")]),e._v(" "),t("li",[e._v("可读性和可维护性")]),e._v(" "),t("li",[e._v("效率")])]),e._v(" "),t("h3",{attrs:{id:"_2-构建正则前提"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-构建正则前提"}},[e._v("#")]),e._v(" 2. 构建正则前提")]),e._v(" "),t("p",[t("strong",[e._v("2.1 是否能使用正则")]),e._v("\n正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。\n比如匹配这样的字符串：1010010001....\n虽然很有规律，但是只靠正则就是无能为力。\n"),t("strong",[e._v("2.2 是否有必要使用正则")]),e._v("\n要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。")]),e._v(" "),t("ul",[t("li",[e._v("比如，从日期中提取出年月日，虽然可以使用正则：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017-07-01";\nvar regex = /^(\\d{4})-(\\d{2})-(\\d{2})/;\nconsole.log( string.match(regex) );\n// => ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]\n复制代码\n')])])]),t("p",[e._v("其实，可以使用字符串的"),t("code",[e._v("split")]),e._v("方法来做，即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017-07-01";\nvar result = string.split("-");\nconsole.log( result );\n// => ["2017", "07", "01"]\n复制代码\n')])])]),t("ul",[t("li",[e._v("比如，判断是否有问号，虽然可以使用：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "?id=xx&act=search";\nconsole.log( string.search(/\\?/) );\n// => 0\n复制代码\n')])])]),t("p",[e._v("其实，可以使用字符串的"),t("code",[e._v("indexOf")]),e._v("方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "?id=xx&act=search";\nconsole.log( string.indexOf("?") );\n// => 0\n复制代码\n')])])]),t("ul",[t("li",[e._v("比如获取子串，虽然可以使用正则：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "JavaScript";\nconsole.log( string.match(/.{4}(.+)/)[1] );\n// => Script\n复制代码\n')])])]),t("p",[e._v("其实，可以直接使用字符串的"),t("code",[e._v("substring")]),e._v("或"),t("code",[e._v("substr")]),e._v("方法来做：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "JavaScript";\nconsole.log( string.substring(4) );\n// => Script\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.3 是否有必要构建一个复杂的正则")]),e._v("\n比如密码匹配问题，要求密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。\n在第2章里，我们写出了正则是：\n"),t("code",[e._v("/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/")]),e._v("\n其实可以使用多个小正则来做：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex1 = /^[0-9A-Za-z]{6,12}$/;\nvar regex2 = /^[0-9]{6,12}$/;\nvar regex3 = /^[A-Z]{6,12}$/;\nvar regex4 = /^[a-z]{6,12}$/;\nfunction checkPassword(string) {\n\tif (!regex1.test(string)) return false;\n\tif (regex2.test(string)) return false;\n\tif (regex3.test(string)) return false;\n\tif (regex4.test(string)) return false;\n\treturn true;\n}\n复制代码\n")])])]),t("h3",{attrs:{id:"_3-准确性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-准确性"}},[e._v("#")]),e._v(" 3. 准确性")]),e._v(" "),t("p",[e._v("所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。\n这里提到了“预期”二字，那么我们就需要知道目标的组成规则。\n不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。\n下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。\n"),t("strong",[e._v("3.1 匹配固定电话")]),e._v("\n比如要匹配如下格式的固定电话号码：")]),e._v(" "),t("blockquote",[t("p",[e._v("055188888888\n0551-88888888\n(0551)88888888")])]),e._v(" "),t("p",[e._v("第一步，了解各部分的模式规则。\n上面的电话，总体上分为区号和号码两部分（不考虑分机号和+86的情形）。\n区号是0开头的3到4位数字，对应的正则是："),t("code",[e._v("0\\d{2,3}")]),e._v("\n号码是非0开头的7到8位数字，对应的正则是："),t("code",[e._v("[1-9]\\d{6,7}")]),e._v("\n因此，匹配055188888888的正则是："),t("code",[e._v("/^0\\d{2,3}[1-9]\\d{6,7}$/")]),e._v("\n匹配0551-88888888的正则是："),t("code",[e._v("/^0\\d{2,3}-[1-9]\\d{6,7}$/")]),e._v("\n匹配(0551)88888888的正则是："),t("code",[e._v("/^\\(0\\d{2,3}\\)[1-9]\\d{6,7}$/")]),e._v("\n第二步，明确形式关系。\n这三者情形是或的关系，可以构建分支：\n"),t("code",[e._v("/^0\\d{2,3}[1-9]\\d{6,7}$|^0\\d{2,3}-[1-9]\\d{6,7}$|^\\(0\\d{2,3}\\)[1-9]\\d{6,7}$/")]),e._v("\n提取公共部分：\n"),t("code",[e._v("/^(0\\d{2,3}|0\\d{2,3}-|\\(0\\d{2,3}\\))[1-9]\\d{6,7}$/")]),e._v("\n进一步简写：\n"),t("code",[e._v("/^(0\\d{2,3}-?|\\(0\\d{2,3}\\))[1-9]\\d{6,7}$/")]),e._v("\n其可视化形式：")]),e._v(" "),t("p",[e._v("上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。\n上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：\n"),t("code",[e._v("/^\\(?0\\d{2,3}\\)?-?[1-9]\\d{6,7}$/")]),e._v("\n虽然也能匹配上述目标字符串，但也会匹配(0551-88888888这样的字符串。当然，这不是我们想要的。\n其实这个正则也不是完美的，因为现实中，并不是每个3位数和4位数都是一个真实的区号。\n这就是一个平衡取舍问题，一般够用就行。\n"),t("strong",[e._v("3.2 匹配浮点数")]),e._v("\n要求匹配如下的格式：")]),e._v(" "),t("blockquote",[t("p",[e._v("1.23、+1.23、-1.23\n10、+10、-10\n.2、+.2、-.2")])]),e._v(" "),t("p",[e._v("可以看出正则分为三部分。\n符号部分："),t("code",[e._v("[+-]")]),e._v("\n整数部分："),t("code",[e._v("\\d+")]),e._v("\n小数部分："),t("code",[e._v("\\.\\d+")]),e._v("\n上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：\n"),t("code",[e._v("/^[+-]?(\\d+)?(\\.\\d+)?$/")]),e._v('\n此正则看似没问题，但这个正则也会匹配空字符""。\n因为目标字符串的形式关系不是要求每部分都是可选的。\n要匹配1.23、+1.23、-1.23，可以用'),t("code",[e._v("/^[+-]?\\d+\\.\\d+$/")]),e._v("\n要匹配10、+10、-10，可以用"),t("code",[e._v("/^[+-]?\\d+$/")]),e._v("\n要匹配.2、+.2、-.2，可以用"),t("code",[e._v("/^[+-]?\\.\\d+$/")]),e._v("\n因此整个正则是这三者的或的关系，提取公众部分后是：\n"),t("code",[e._v("/^[+-]?(\\d+\\.\\d+|\\d+|\\.\\d+)$/")]),e._v("\n其可视化形式是：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859850080-3a298388-2bc9-402a-b5b8-8f06cecde38a.webp#align=left&display=inline&height=273&originHeight=273&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n如果要求不匹配+.2和-.2，此时正则变成：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859850041-e1c25149-40de-413b-853b-1f5f335fb296.webp#align=left&display=inline&height=294&originHeight=294&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n当然，"),t("code",[e._v("/^[+-]?(\\d+\\.\\d+|\\d+|\\.\\d+)$/")]),e._v("也不是完美的，我们也是做了些取舍，比如：")]),e._v(" "),t("ul",[t("li",[e._v("它也会匹配012这样以0开头的整数。如果要求不匹配的话，需要修改整数部分的正则。")]),e._v(" "),t("li",[e._v("一般进行验证操作之前，都要经过trim和判空。那样的话，也许那个错误正则也就够用了。")]),e._v(" "),t("li",[e._v("也可以进一步改写成："),t("code",[e._v("/^[+-]?(\\d+)?(\\.)?\\d+$/")]),e._v("，这样我们就需要考虑可读性和可维护性了。")])]),e._v(" "),t("h3",{attrs:{id:"_4-效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-效率"}},[e._v("#")]),e._v(" 4. 效率")]),e._v(" "),t("p",[e._v("保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。\n正则表达式的运行分为如下的阶段：")]),e._v(" "),t("ol",[t("li",[e._v("编译")]),e._v(" "),t("li",[e._v("设定起始位置")]),e._v(" "),t("li",[e._v("尝试匹配")]),e._v(" "),t("li",[e._v("匹配失败的话，从下一位开始继续第3步")]),e._v(" "),t("li",[e._v("最终结果：匹配成功或失败")])]),e._v(" "),t("p",[e._v("下面以代码为例，来看看这几个阶段都做了什么：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d+/g;\nconsole.log( regex.lastIndex, regex.exec("123abc34def") );\nconsole.log( regex.lastIndex, regex.exec("123abc34def") );\nconsole.log( regex.lastIndex, regex.exec("123abc34def") );\nconsole.log( regex.lastIndex, regex.exec("123abc34def") );\n// => 0 ["123", index: 0, input: "123abc34def"]\n// => 3 ["34", index: 6, input: "123abc34def"]\n// => 8 null\n// => 0 ["123", index: 0, input: "123abc34def"]\n复制代码\n')])])]),t("p",[e._v("具体分析如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /\\d+/g;复制代码\n")])])]),t("p",[e._v("当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regex.exec("123abc34def")\n复制代码\n')])])]),t("p",[e._v("当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第0位。\n但当使用"),t("code",[e._v("test")]),e._v("和"),t("code",[e._v("exec")]),e._v("方法，且正则有"),t("code",[e._v("g")]),e._v("时，起始位置是从正则对象的"),t("code",[e._v("lastIndex")]),e._v("属性开始。\n因此第一次"),t("code",[e._v("exec")]),e._v("是从第0位开始，而第二次是从3开始的。\n设定好起始位置后，就开始尝试匹配了。\n比如第一次"),t("code",[e._v("exec")]),e._v("，从0开始，去尝试匹配，并且成功地匹配到3个数字。此时结束时的下标是2，因此下一次的起始位置是3。\n而第二次，起始下标是3，但第3个字符是“a”，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第4位开始继续尝试匹配，但该字符是b，也不是数字。再移动到下一位，是c仍不行，再移动一位是数字3，此时匹配到了两位数字34。此时，下一次匹配的位置是d的位置，即第8位。\n第三次，是从第8位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回"),t("code",[e._v("null")]),e._v("。同时设置"),t("code",[e._v("lastIndex")]),e._v("为0，即，如要再尝试匹配的话，需从头开始。\n从上面可以看出，匹配会出现效率问题，主要出现在上面的第3阶段和第4阶段。\n因此，主要优化手法也是针对这两阶段的。\n"),t("strong",[e._v("4.1 使用具体型字符组来代替通配符，来消除回溯")]),e._v('\n而在第三阶段，最大的问题就是回溯。\n例如，匹配双引用号之间的字符。如，匹配字符串123"abc"456中的"abc"。\n如果正则用的是：'),t("code",[e._v('/".*"/')]),e._v("，，会在第3阶段产生4次回溯（粉色表示"),t("code",[e._v(".*")]),e._v("匹配的内容）：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859849973-34519e42-f059-4017-8373-a07e651a89ec.webp#align=left&display=inline&height=658&originHeight=658&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n如果正则用的是："),t("code",[e._v('/".*?"/')]),e._v("，会产生2次回溯（粉色表示"),t("code",[e._v(".*?")]),e._v("匹配的内容）：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/webp/119800/1568859850027-f3a86915-1d56-4d7b-973f-92ec7ec26acb.webp#align=left&display=inline&height=285&originHeight=285&originWidth=600&search=&size=0&status=done&width=600",alt:""}}),e._v("\n因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。\n此时要使用具体化的字符组，来代替通配符"),t("code",[e._v(".")]),e._v("，以便消除不必要的字符，此时使用正则"),t("code",[e._v('/"[^"]*"/')]),e._v("，即可。\n"),t("strong",[e._v("4.2 使用非捕获型分组")]),e._v("\n因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。\n当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：\n"),t("code",[e._v("/^[+-]?(\\d+\\.\\d+|\\d+|\\.\\d+)$/")]),e._v("\n可以修改成：\n"),t("code",[e._v("/^[+-]?(?:\\d+\\.\\d+|\\d+|\\.\\d+)$/")]),e._v(" "),t("strong",[e._v("4.3 独立出确定字符")]),e._v("\n例如"),t("code",[e._v("/a+/")]),e._v("，可以修改成"),t("code",[e._v("/aa*/")]),e._v("。\n因为后者能比前者多确定了字符a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。\n"),t("strong",[e._v("4.4 提取分支公共部分")]),e._v("\n比如/"),t("code",[e._v("^abc|^def/")]),e._v("，修改成"),t("code",[e._v("/^(?:abc|def)/")]),e._v("。\n又比如"),t("code",[e._v("/this|that/")]),e._v("，修改成"),t("code",[e._v("/th(?:is|at)/")]),e._v("。\n这样做，可以减少匹配过程中可消除的重复。\n"),t("strong",[e._v("4.5 减少分支的数量，缩小它们的范围")]),e._v(" "),t("code",[e._v("/red|read/")]),e._v("，可以修改成"),t("code",[e._v("/rea?d/")]),e._v("。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。")]),e._v(" "),t("h3",{attrs:{id:"第六章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第六章小结"}},[e._v("#")]),e._v(" 第六章小结")]),e._v(" "),t("p",[e._v("本章涉及的内容并不多。\n一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。\n至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。\n关于准确性，本章关心的是最常用的解决思路：\n针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。\n至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。")]),e._v(" "),t("h2",{attrs:{id:"第七章-正则表达式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第七章-正则表达式编程"}},[e._v("#")]),e._v(" 第七章 正则表达式编程")]),e._v(" "),t("p",[e._v("什么叫知识，能指导我们实践的东西才叫知识。\n学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。\n掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。\n那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。\n内容包括：")]),e._v(" "),t("ol",[t("li",[e._v("正则表达式的四种操作")]),e._v(" "),t("li",[e._v("相关API注意要点")]),e._v(" "),t("li",[e._v("真实案例")])]),e._v(" "),t("h3",{attrs:{id:"_1-正则表达式的四种操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-正则表达式的四种操作"}},[e._v("#")]),e._v(" 1. 正则表达式的四种操作")]),e._v(" "),t("p",[e._v("正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。\n有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。\n进行任何相关操作，也需要宿主引擎相关API的配合使用。当然，在JS中，相关API也不多。\n"),t("strong",[e._v("1.1 验证")]),e._v("\n验证是正则表达式最直接的应用，比如表单验证。\n在说验证之前，先要说清楚匹配是什么概念。\n所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。\n有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。\n这里举一个例子，来看看如何使用相关API进行验证操作的。\n比如，判断一个字符串中是否有数字。")]),e._v(" "),t("ul",[t("li",[e._v("使用"),t("code",[e._v("search")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d/;\nvar string = "abc123";\nconsole.log( !!~string.search(regex) );\n// => true\n复制代码\n')])])]),t("ul",[t("li",[e._v("使用"),t("code",[e._v("test")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d/;\nvar string = "abc123";\nconsole.log( regex.test(string) );\n// => true\n复制代码\n')])])]),t("ul",[t("li",[e._v("使用"),t("code",[e._v("match")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d/;\nvar string = "abc123";\nconsole.log( !!string.match(regex) );\n// => true\n复制代码\n')])])]),t("ul",[t("li",[e._v("使用"),t("code",[e._v("exec")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\d/;\nvar string = "abc123";\nconsole.log( !!regex.exec(string) );\n// => true\n复制代码\n')])])]),t("p",[e._v("其中，最常用的是"),t("code",[e._v("test")]),e._v("。\n"),t("strong",[e._v("1.2 切分")]),e._v("\n匹配上了，我们就可以进行一些操作，比如切分。\n所谓“切分”，就是把目标字符串，切成一段一段的。在JS中使用的是"),t("code",[e._v("split")]),e._v('。\n比如，目标字符串是"html,css,javascript"，按逗号来切分：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /,/;\nvar string = "html,css,javascript";\nconsole.log( string.split(regex) );\n// => ["html", "css", "javascript"]\n复制代码\n')])])]),t("p",[e._v("又比如，如下的日期格式：")]),e._v(" "),t("blockquote",[t("p",[e._v("2017/06/26\n2017.06.26\n2017-06-26")])]),e._v(" "),t("p",[e._v("可以使用"),t("code",[e._v("split")]),e._v("“切出”年月日：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /\\D/;\nconsole.log( "2017/06/26".split(regex) );\nconsole.log( "2017.06.26".split(regex) );\nconsole.log( "2017-06-26".split(regex) );\n// => ["2017", "06", "26"]\n// => ["2017", "06", "26"]\n// => ["2017", "06", "26"]\n复制代码\n')])])]),t("p",[t("strong",[e._v("1.3 提取")]),e._v("\n虽然整体匹配上了，但有时需要提取部分匹配的数据。\n此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关API。\n这里，还是以日期为例，提取出年月日。注意下面正则中的括号：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("match")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nconsole.log( string.match(regex) );\n// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]\n复制代码\n')])])]),t("ul",[t("li",[t("code",[e._v("exec")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nconsole.log( regex.exec(string) );\n// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]\n复制代码\n')])])]),t("ul",[t("li",[t("code",[e._v("test")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nregex.test(string);\nconsole.log( RegExp.$1, RegExp.$2, RegExp.$3 );\n// => "2017" "06" "26"\n复制代码\n')])])]),t("ul",[t("li",[t("code",[e._v("search")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nstring.search(regex);\nconsole.log( RegExp.$1, RegExp.$2, RegExp.$3 );\n// => "2017" "06" "26"\n复制代码\n')])])]),t("ul",[t("li",[t("code",[e._v("replace")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nvar date = [];\nstring.replace(regex, function(match, year, month, day) {\n\tdate.push(year, month, day);\n});\nconsole.log(date);\n// => ["2017", "06", "26"]\n复制代码\n')])])]),t("p",[e._v("其中，最常用的是"),t("code",[e._v("match")]),e._v("。\n"),t("strong",[e._v("1.4 替换")]),e._v("\n找，往往不是目的，通常下一步是为了替换。在JS中，使用"),t("code",[e._v("replace")]),e._v("进行替换。\n比如把日期格式，从yyyy-mm-dd替换成yyyy/mm/dd：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017-06-26";\nvar today = new Date( string.replace(/-/g, "/") );\nconsole.log( today );\n// => Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)\n复制代码\n')])])]),t("p",[e._v("这里只是简单地应用了一下"),t("code",[e._v("replace")]),e._v("。但，"),t("code",[e._v("replace")]),e._v("方法是强大的，是需要重点掌握的。")]),e._v(" "),t("h3",{attrs:{id:"_2-相关api注意要点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-相关api注意要点"}},[e._v("#")]),e._v(" 2. 相关API注意要点")]),e._v(" "),t("p",[e._v("从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：")]),e._v(" "),t("blockquote",[t("p",[e._v("String#search\nString#split\nString#match\nString#replace\nRegExp#test\nRegExp#exec")])]),e._v(" "),t("p",[e._v("本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。\n"),t("strong",[e._v("2.1 search和match的参数问题")]),e._v("\n我们知道字符串实例的那4个方法参数都支持正则和字符串。\n但"),t("code",[e._v("search")]),e._v("和"),t("code",[e._v("match")]),e._v("，会把字符串转换为正则的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017.06.27";\nconsole.log( string.search(".") );\n// => 0\n//需要修改成下列形式之一\nconsole.log( string.search("\\\\.") );\nconsole.log( string.search(/\\./) );\n// => 4\n// => 4\nconsole.log( string.match(".") );\n// => ["2", index: 0, input: "2017.06.27"]\n//需要修改成下列形式之一\nconsole.log( string.match("\\\\.") );\nconsole.log( string.match(/\\./) );\n// => [".", index: 4, input: "2017.06.27"]\n// => [".", index: 4, input: "2017.06.27"]\nconsole.log( string.split(".") );\n// => ["2017", "06", "27"]\nconsole.log( string.replace(".", "/") );\n// => "2017/06.27"\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.2 match返回结果的格式问题")]),e._v(" "),t("code",[e._v("match")]),e._v("返回结果的格式，与正则对象是否有修饰符"),t("code",[e._v("g")]),e._v("有关。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017.06.27";\nvar regex1 = /\\b(\\d+)\\b/;\nvar regex2 = /\\b(\\d+)\\b/g;\nconsole.log( string.match(regex1) );\nconsole.log( string.match(regex2) );\n// => ["2017", "2017", index: 0, input: "2017.06.27"]\n// => ["2017", "06", "27"]\n复制代码\n')])])]),t("p",[e._v("没有"),t("code",[e._v("g")]),e._v("，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。\n有"),t("code",[e._v("g")]),e._v("，返回的是所有匹配的内容。\n当没有匹配时，不管有无"),t("code",[e._v("g")]),e._v("，都返回"),t("code",[e._v("null")]),e._v("。\n"),t("strong",[e._v("2.3 exec比match更强大")]),e._v("\n当正则没有"),t("code",[e._v("g")]),e._v("时，使用"),t("code",[e._v("match")]),e._v("返回的信息比较多。但是有"),t("code",[e._v("g")]),e._v("后，就没有关键的信息"),t("code",[e._v("index")]),e._v("了。\n而"),t("code",[e._v("exec")]),e._v("方法就能解决这个问题，它能接着上一次匹配后继续匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017.06.27";\nvar regex2 = /\\b(\\d+)\\b/g;\nconsole.log( regex2.exec(string) );\nconsole.log( regex2.lastIndex);\nconsole.log( regex2.exec(string) );\nconsole.log( regex2.lastIndex);\nconsole.log( regex2.exec(string) );\nconsole.log( regex2.lastIndex);\nconsole.log( regex2.exec(string) );\nconsole.log( regex2.lastIndex);\n// => ["2017", "2017", index: 0, input: "2017.06.27"]\n// => 4\n// => ["06", "06", index: 5, input: "2017.06.27"]\n// => 7\n// => ["27", "27", index: 8, input: "2017.06.27"]\n// => 10\n// => null\n// => 0\n复制代码\n')])])]),t("p",[e._v("其中正则实例"),t("code",[e._v("lastIndex")]),e._v("属性，表示下一次匹配开始的位置。\n比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。\n从上述代码看出，在使用"),t("code",[e._v("exec")]),e._v("时，经常需要配合使用"),t("code",[e._v("while")]),e._v("循环：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017.06.27";\nvar regex2 = /\\b(\\d+)\\b/g;\nvar result;\nwhile ( result = regex2.exec(string) ) {\n\tconsole.log( result, regex2.lastIndex );\n}\n// => ["2017", "2017", index: 0, input: "2017.06.27"] 4\n// => ["06", "06", index: 5, input: "2017.06.27"] 7\n// => ["27", "27", index: 8, input: "2017.06.27"] 10\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.4 修饰符g，对exex和test的影响")]),e._v("\n上面提到了正则实例的"),t("code",[e._v("lastIndex")]),e._v("属性，表示尝试匹配时，从字符串的"),t("code",[e._v("lastIndex")]),e._v("位开始去匹配。\n字符串的四个方法，每次匹配时，都是从0开始的，即"),t("code",[e._v("lastIndex")]),e._v("属性始终不变。\n而正则实例的两个方法"),t("code",[e._v("exec")]),e._v("、"),t("code",[e._v("test")]),e._v("，当正则是全局匹配时，每一次匹配完成后，都会修改"),t("code",[e._v("lastIndex")]),e._v("。下面让我们以"),t("code",[e._v("test")]),e._v("为例，看看你是否会迷糊：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /a/g;\nconsole.log( regex.test("a"), regex.lastIndex );\nconsole.log( regex.test("aba"), regex.lastIndex );\nconsole.log( regex.test("ababc"), regex.lastIndex );\n// => true 1\n// => true 3\n// => false 0\n复制代码\n')])])]),t("p",[e._v("注意上面代码中的第三次调用"),t("code",[e._v("test")]),e._v("，因为这一次尝试匹配，开始从下标"),t("code",[e._v("lastIndex")]),e._v("即3位置处开始查找，自然就找不到了。\n如果没有"),t("code",[e._v("g")]),e._v("，自然都是从字符串第0个字符处开始尝试匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /a/;\nconsole.log( regex.test("a"), regex.lastIndex );\nconsole.log( regex.test("aba"), regex.lastIndex );\nconsole.log( regex.test("ababc"), regex.lastIndex );\n// => true 0\n// => true 0\n// => true 0\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.5 test整体匹配时需要使用^和$")]),e._v("\n这个相对容易理解，因为"),t("code",[e._v("test")]),e._v("是看目标字符串中是否有子串匹配正则，即有部分匹配即可。\n如果，要整体匹配，正则前后需要添加开头和结尾：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('console.log( /123/.test("a123b") );\n// => true\nconsole.log( /^123$/.test("a123b") );\n// => false\nconsole.log( /^123$/.test("123") );\n// => true\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.6 split相关注意事项")]),e._v(" "),t("code",[e._v("split")]),e._v("方法看起来不起眼，但要注意的地方有两个的。\n第一，它可以有第二个参数，表示结果数组的最大长度：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "html,css,javascript";\nconsole.log( string.split(/,/, 2) );\n// =>["html", "css"]\n复制代码\n')])])]),t("p",[e._v("第二，正则使用分组时，结果数组中是包含分隔符的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "html,css,javascript";\nconsole.log( string.split(/(,)/) );\n// =>["html", ",", "css", ",", "javascript"]\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.7 replace是很强大的")]),e._v("\n《JavaScript权威指南》认为"),t("code",[e._v("exec")]),e._v("是这6个API中最强大的，而我始终认为"),t("code",[e._v("replace")]),e._v("才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。\n总体来说"),t("code",[e._v("replace")]),e._v("有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。\n当第二个参数是字符串时，如下的字符有特殊的含义：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("$1")]),e._v(",> "),t("code",[e._v("$2")]),e._v(",...,> "),t("code",[e._v("$99")]),e._v("匹配第1~99个分组里捕获的文本> "),t("code",[e._v("$&")]),e._v(" 匹配到的子串文本> "),t("code",[e._v("$`` 匹配到的子串的左边文本 >")]),e._v("$'"),t("code",[e._v("匹配到的子串的右边文本>")]),e._v('$$` 美元符号\n例如，把"2,3,5"，变成"5=2+3"：')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "2,3,5".replace(/(\\d+),(\\d+),(\\d+)/, "$3=$1+$2");\nconsole.log(result);\n// => "5=2+3"\n复制代码\n')])])]),t("p",[e._v('又例如，把"2,3,5"，变成"222,333,555":')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "2,3,5".replace(/(\\d+)/g, "$&$&$&");\nconsole.log(result);\n// => "222,333,555"\n复制代码\n')])])]),t("p",[e._v('再例如，把"2+3=5"，变成"2+3=2+3=5=5":')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var result = "2+3=5".replace(/=/, "$&$`$&$\'$&");\nconsole.log(result);\n// => "2+3=2+3=5=5"\n复制代码\n')])])]),t("p",[e._v("当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"1234 2345 3456".replace(/(\\d)\\d{2}(\\d)/g, function(match, $1, $2, index, input) {\n\tconsole.log([match, $1, $2, index, input]);\n});\n// => ["1234", "1", "4", 0, "1234 2345 3456"]\n// => ["2345", "2", "5", 5, "1234 2345 3456"]\n// => ["3456", "3", "6", 10, "1234 2345 3456"]\n复制代码\n')])])]),t("p",[e._v("此时我们可以看到"),t("code",[e._v("replace")]),e._v("拿到的信息，并不比"),t("code",[e._v("exec")]),e._v("少。\n"),t("strong",[e._v("2.8 使用构造函数需要注意的问题")]),e._v("\n一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多"),t("code",[e._v("\\")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var string = "2017-06-27 2017.06.27 2017/06/27";\nvar regex = /\\d{4}(-|\\.|\\/)\\d{2}\\1\\d{2}/g;\nconsole.log( string.match(regex) );\n// => ["2017-06-27", "2017.06.27", "2017/06/27"]\nregex = new RegExp("\\\\d{4}(-|\\\\.|\\\\/)\\\\d{2}\\\\1\\\\d{2}", "g");\nconsole.log( string.match(regex) );\n// => ["2017-06-27", "2017.06.27", "2017/06/27"]\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.9 修饰符")]),e._v("\nES5中修饰符，共3个：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("g")]),e._v(" 全局匹配，即找到所有匹配的，单词是global\n"),t("code",[e._v("i")]),e._v(" 忽略字母大小写，单词ingoreCase\n"),t("code",[e._v("m")]),e._v(" 多行匹配，只影响"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v("，二者变成行的概念，即行开头和行结尾。单词是multiline")])]),e._v(" "),t("p",[e._v("当然正则对象也有相应的只读属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /\\w/img;\nconsole.log( regex.global );\nconsole.log( regex.ignoreCase );\nconsole.log( regex.multiline );\n// => true\n// => true\n// => true\n复制代码\n")])])]),t("p",[t("strong",[e._v("2.10 source属性")]),e._v("\n正则实例对象属性，除了"),t("code",[e._v("global")]),e._v("、"),t("code",[e._v("ingnoreCase")]),e._v("、"),t("code",[e._v("multiline")]),e._v("、"),t("code",[e._v("lastIndex")]),e._v("属性之外，还有一个"),t("code",[e._v("source")]),e._v("属性。\n它什么时候有用呢？\n比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var className = "high";\nvar regex = new RegExp("(^|\\\\s)" + className + "(\\\\s|$)");\nconsole.log( regex.source )\n// => (^|\\s)high(\\s|$) 即字符串"(^|\\\\s)high(\\\\s|$)"\n复制代码\n')])])]),t("p",[t("strong",[e._v("2.11 构造函数属性")]),e._v("\n构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是"),t("code",[e._v("$1")]),e._v(",...,"),t("code",[e._v("$9")]),e._v("之外，还有几个不太常用的属性（有兼容性问题）：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("RegExp.input")]),e._v(" 最近一次目标字符串，简写成> "),t("code",[e._v('RegExp["$_"]')]),e._v("> "),t("code",[e._v("RegExp.lastMatch")]),e._v(" 最近一次匹配的文本，简写成> "),t("code",[e._v('RegExp["$&"]')]),e._v("> "),t("code",[e._v("RegExp.lastParen")]),e._v(" 最近一次捕获的文本，简写成> "),t("code",[e._v('RegExp["$+"]')]),e._v("> "),t("code",[e._v("RegExp.leftContext")]),e._v(" 目标字符串中> "),t("code",[e._v("lastMatch")]),e._v("之前的文本，简写成> "),t("code",[e._v('RegExp["$')]),e._v('"]'),t("code",[e._v(">")]),e._v("RegExp.rightContext "),t("code",[e._v("目标字符串中>")]),e._v("lastMatch"),t("code",[e._v("之后的文本，简写成>")]),e._v('RegExp["$\'"]`\n测试代码如下：')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var regex = /([abc])(\\d)/g;\nvar string = "a1b2c3d4e5";\nstring.match(regex);\nconsole.log( RegExp.input );\nconsole.log( RegExp["$_"]);\n// => "a1b2c3d4e5"\nconsole.log( RegExp.lastMatch );\nconsole.log( RegExp["$&"] );\n// => "c3"\nconsole.log( RegExp.lastParen );\nconsole.log( RegExp["$+"] );\n// => "3"\nconsole.log( RegExp.leftContext );\nconsole.log( RegExp["$`"] );\n// => "a1b2"\nconsole.log( RegExp.rightContext );\nconsole.log( RegExp["$\'"] );\n// => "d4e5"复制代码\n')])])]),t("h3",{attrs:{id:"_3-真实案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-真实案例"}},[e._v("#")]),e._v(" 3. 真实案例")]),e._v(" "),t("p",[t("strong",[e._v("3.1 使用构造函数生成正则表达式")]),e._v("\n我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟"),t("code",[e._v("getElementsByClassName")]),e._v("方法，就是很能说明该问题的一个例子。\n这里"),t("code",[e._v("getElementsByClassName")]),e._v("函数的实现思路是：")]),e._v(" "),t("ul",[t("li",[e._v('比如要获取className为"high"的dom元素；')]),e._v(" "),t("li",[e._v("首先生成一个正则："),t("code",[e._v("/(^|\\s)high(\\s|$)/")]),e._v("；")]),e._v(" "),t("li",[e._v("然后再用其逐一验证页面上的所有dom元素的类名，拿到满足匹配的元素即可。")])]),e._v(" "),t("p",[e._v("代码如下(可以直接复制到本地查看运行效果)：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<p class="high">1111</p>\n<p class="high">2222</p>\n<p>3333</p>\n<script>\nfunction getElementsByClassName(className) {\n\tvar elements = document.getElementsByTagName("*");\n\tvar regex = new RegExp("(^|\\\\s)" + className + "(\\\\s|$)");\n\tvar result = [];\n\tfor (var i = 0; i < elements.length; i++) {\n\t\tvar element = elements[i];\n\t\tif (regex.test(element.className)) {\n\t\t\tresult.push(element)\n\t\t}\n\t}\n\treturn result;\n}\nvar highs = getElementsByClassName(\'high\');\nhighs.forEach(function(item) {\n\titem.style.color = \'red\';\n});\n<\/script>\n复制代码\n')])])]),t("p",[t("strong",[e._v("3.2 使用字符串保存数据")]),e._v("\n一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。\n使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var utils = {};\n"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error".split("|").forEach(function(item) {\n\tutils["is" + item] = function(obj) {\n\t\treturn {}.toString.call(obj) == "[object " + item + "]";\n\t};\n});\nconsole.log( utils.isArray([1, 2, 3]) );\n// => true\n复制代码\n')])])]),t("p",[t("strong",[e._v("3.3 if语句中使用正则替代&&")]),e._v("\n比如，模拟"),t("code",[e._v("ready")]),e._v("函数，即加载完毕后再执行回调（不兼容ie的）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var readyRE = /complete|loaded|interactive/;\nfunction ready(callback) {\n\tif (readyRE.test(document.readyState) && document.body) {\n\t\tcallback()\n\t} \n\telse {\n\t\tdocument.addEventListener(\n\t\t\t'DOMContentLoaded', \n\t\t\tfunction () {\n\t\t\t\tcallback()\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t}\n};\nready(function() {\n\talert(\"加载完毕！\")\n});\n复制代码\n")])])]),t("p",[t("strong",[e._v("3.4 使用强大的replace")]),e._v("\n因为"),t("code",[e._v("replace")]),e._v("方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。\n这里以查询字符串（querystring）压缩技术为例，注意下面"),t("code",[e._v("replace")]),e._v("方法中，回调函数根本没有返回任何东西。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function compress(source) {\n\tvar keys = {};\n\tsource.replace(/([^=&]+)=([^&]*)/g, function(full, key, value) {\n\t\tkeys[key] = (keys[key] ? keys[key] + ',' : '') + value;\n\t});\n\tvar result = [];\n\tfor (var key in keys) {\n\t\tresult.push(key + '=' + keys[key]);\n\t}\n\treturn result.join('&');\n}\nconsole.log( compress(\"a=1&b=2&a=3&b=4\") );\n// => \"a=1,3&b=2,4\"\n复制代码\n")])])]),t("p",[t("strong",[e._v("3.5 综合运用")]),e._v("\n最后这里再做个简单实用的正则测试器。\n具体效果如下：")]),e._v(" "),t("p",[e._v("代码，直接贴了，相信你能看得懂：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<section>\n\t<div id="err"></div>\n\t<input id="regex" placeholder="请输入正则表达式">\n\t<input id="text" placeholder="请输入测试文本">\n\t<button id="run">测试一下</button>\n\t<div id="result"></div>\n</section>\n<style>\nsection{\n\tdisplay:flex;\n\tflex-direction:column;\n\tjustify-content:space-around;\n\theight:300px;\n\tpadding:0 200px;\n}\nsection *{\n\tmin-height:30px;\n}\n#err {\n\tcolor:red;\n}\n#result{\n\tline-height:30px;\n}\n.info {\n\tbackground:#00c5ff;\n\tpadding:2px;\n\tmargin:2px;\n\tdisplay:inline-block;\n}\n</style>\n<script>\n(function() {\n\t// 获取相应dom元素\n\tvar regexInput = document.getElementById("regex");\n\tvar textInput = document.getElementById("text");\n\tvar runBtn = document.getElementById("run");\n\tvar errBox = document.getElementById("err");\n\tvar resultBox = document.getElementById("result");\n\t\n\t// 绑定点击事件\n\trunBtn.onclick = function() {\n\t\t// 清除错误和结果\n\t\terrBox.innerHTML = "";\n\t\tresultBox.innerHTML = "";\n\t\t\n\t\t// 获取正则和文本\n\t\tvar text = textInput.value;\n\t\tvar regex = regexInput.value;\n\t\t\n\t\tif (regex == "") {\n\t\t\terrBox.innerHTML = "请输入正则表达式";\n\t\t} else if (text == "") {\n\t\t\terrBox.innerHTML = "请输入测试文本";\n\t\t} else {\n\t\t\tregex = createRegex(regex);\n\t\t\tif (!regex) return;\n\t\t\tvar result, results = [];\n\t\t\t\n\t\t\t// 没有修饰符g的话，会死循环\n\t\t\tif (regex.global) {\n\t\t\t\twhile(result = regex.exec(text)) {\n\t\t\t\t\tresults.push(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresults.push(regex.exec(text));\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (results[0] == null) {\n\t\t\t\tresultBox.innerHTML = "匹配到0个结果";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 倒序是有必要的\n\t\t\tfor (var i = results.length - 1; i >= 0; i--) {\n\t\t\t\tvar result = results[i];\n\t\t\t\tvar match = result[0];\n\t\t\t\tvar prefix = text.substr(0, result.index);\n\t\t\t\tvar suffix = text.substr(result.index + match.length);\n\t\t\t\ttext = prefix \n\t\t\t\t\t+ \'<span class="info">\'\n\t\t\t\t\t+ match\n\t\t\t\t\t+ \'</span>\'\n\t\t\t\t\t+ suffix;\n\t\t\t}\n\t\t\tresultBox.innerHTML = "匹配到" + results.length + "个结果:<br>" + text;\n\t\t}\n\t};\n\t\n\t// 生成正则表达式，核心函数\n\tfunction createRegex(regex) {\n\t\ttry {\n\t\t\tif (regex[0] == "/") {\n\t\t\t\tregex = regex.split("/");\n\t\t\t\tregex.shift();\n\t\t\t\tvar flags = regex.pop();\n\t\t\t\tregex = regex.join("/");\n\t\t\t\tregex = new RegExp(regex, flags);\n\t\t\t} else {\n\t\t\t\tregex = new RegExp(regex, "g");\n\t\t\t}\n\t\t\treturn regex;\n\t\t} catch(e) {\n\t\t\terrBox.innerHTML = "无效的正则表达式";\n\t\t\treturn false;\n\t\t}\n\t}\n})();\n<\/script>复制代码\n')])])]),t("h3",{attrs:{id:"第七章小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第七章小结"}},[e._v("#")]),e._v(" 第七章小结")]),e._v(" "),t("p",[e._v("相关API的注意点，本章基本上算是一网打尽了。\n至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。")]),e._v(" "),t("h2",{attrs:{id:"后记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[e._v("#")]),e._v(" 后记")]),e._v(" "),t("p",[e._v("其实本文首发于："),t("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F27653434",target:"_blank",rel:"noopener noreferrer"}},[e._v("正则表达式系列总结 - 知乎专栏"),t("OutboundLink")],1),e._v("\n原文是一个系列。一直等到老姚成为掘金的专栏作者，经过仔细考虑，在掘金平台没有采用系列形式，而是合成为了一篇文章。这样既便于读者阅读，最起码能一气呵成地阅读。同时也便于作者统一回复留言。\n文章要结束了，最后还要有几点说明。")]),e._v(" "),t("h3",{attrs:{id:"_1-需要注意的地方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-需要注意的地方"}},[e._v("#")]),e._v(" 1. 需要注意的地方")]),e._v(" "),t("p",[e._v("本文主要讨论的是JavaScript的正则表达式，更精确地说是ES5的正则表达式。\nJavaScript的正则表达式引擎是传统型NFA的，因此本系列的讨论是适合任何一门正则引擎是传统型NFA的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而JS里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以JS正则为出发点。")]),e._v(" "),t("h3",{attrs:{id:"_2-参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-参考资料"}},[e._v("#")]),e._v(" 2. 参考资料")]),e._v(" "),t("p",[e._v("当然本文不是无本之末。主要参考的是几本书籍。\n以下书籍中核心章节都认真阅读过，甚至阅读多遍。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F10549733%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《JavaScript权威指南》"),t("OutboundLink")],1),e._v("，看完本系列，再去看书中的第10章，你就知道了什么叫字字珠玑。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F2154713%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精通正则表达式》"),t("OutboundLink")],1),e._v("，权威且比较杂乱，我阅读的第一本正则表达式书籍。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F26285406%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《正则表达式必知必会》"),t("OutboundLink")],1),e._v("，这是我看的第二本正则，看完后，确定自己算是入门了。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F10591096%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《正则指引》"),t("OutboundLink")],1),e._v("，《精通正则表达式》的译者写的，相对清晰。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F22182383%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《正则表达式入门》"),t("OutboundLink")],1),e._v("，我看的是英文版的，对于已经入门的我，基本没多少收获了。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F25986599%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《正则表达式经典实例》"),t("OutboundLink")],1),e._v("，除了第3章，比较杂外，也有收获，以实例为主导的一本书。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fbook.douban.com%2Fsubject%2F26630579%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《JavaScript Regular Expressions》"),t("OutboundLink")],1),e._v("，为数不多转讲JS正则的。页数不多，也有收获。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F5362856%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《高性能JavaScript 》"),t("OutboundLink")],1),e._v("第5章，我看的是英文版的。第5章，讲了回溯和优化。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F26638316%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《JavaScript忍者秘籍》"),t("OutboundLink")],1),e._v("第7章，大概讲了一下正则的用法，几个例子还不错。\n"),t("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F10546125%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("《JavaScript高级程序设计》"),t("OutboundLink")],1),e._v("第5.4节，比较简短的介绍。\n使用的工具：\n"),t("strong",[t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjex.im%2Fregulex%2F%2523%2521embed%253Dfalse%2526flags%253D%2526re%253D%25255E%2528a%25257Cb%2529%252A%25253F%252524",target:"_blank",rel:"noopener noreferrer"}},[e._v("Regulex，一款可视化工具"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.processon.com%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("ProcessOn - 免费在线作图，实时协作"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fwww.appinn.com%2Flicecap%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("LICEcap – 灵活好用，GIF 屏幕录制工具"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"_3-个人感悟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-个人感悟"}},[e._v("#")]),e._v(" 3. 个人感悟")]),e._v(" "),t("p",[t("strong",[e._v("要多写文章的")]),e._v("\n首先，我十分感谢读者。读者能在信息泛滥的网络里，点击我的文章进来瞧两眼，这都是对其注意力的消费。更何况，还有很多童鞋都认真读了，甚至给我挑毛病，这都是对我的帮助。不知有多少童鞋是从头读到这里的，不妨留言打卡，让我知道你是用心的读者，而并非简简单单地收藏一下，然后就再也不曾看过了。\n说到要写文章，其目的是以教为学。看似为了教，其实是为了学**。"),t("strong",[e._v("能教会别人才算自己真正学会了，最起码形成了文字，通过了自己的语言逻辑这一关。如果还能有人指出你的错误认知，那样收获就更大了，何乐而不为呢？\n很多书中都提到类似的观点，例如《知道做到》《好好学习》《与时间做朋友》《暗时间》等。\n"),t("strong",[e._v("以教为学的其他手段")]),e._v("\n当然，以教为学的手段还有很多，比如")]),e._v("翻译一本书**。我私下已经翻译了好几本（窃喜^_^）。\n可以从薄点的书籍开始，比如100页左右的。基本上使用有道就可以了，也不用要求自己一词一句的翻译，能用自己的话说明白就行了。说到这里，不得不提起，我们的阮一峰大神，在我看来，他就是成功地应用这种模式的。看完外文的文章，理解明白了，用自己的话说一说，再形成自己的简练风格。\n恐怕你可能说自己的英文水平不够，没信心尝试。相信我，熟悉了常用词汇（比如literal翻译成字面量）后，配合有道翻译，薄点的书，一天翻译一章是没问题的。当然前提是你懂相关领域，不然是没办法意译的。\n最后一种以教为学的手段是，"),t("strong",[e._v("写一本书")]),e._v("。写文章是基础，文章多了，自然而言就可以写成一本书。当然，写书强调的是整体架构，所以文章最好成体系。\n你看看那些国内专业书籍的作者，一般都事先翻译过几本书的。最起码在前端领域，我就看到了好几位是这么干的。翻译明白了，学会了，用自己的角度去弄出一本书还是相对很容易的。\n虽然，本人并未曾写过书，但上述方法，我始终相信是可行的。\n最后，我们该想到，陆游诗人对前端界做出的最大贡献是：\n纸上得来终觉浅，绝知此事要躬行。\n本文完。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/qdlaoyao/js-regex-mini-book",target:"_blank",rel:"noopener noreferrer"}},[e._v("正则表达式pdf"),t("OutboundLink")],1),t("a",{attrs:{href:"https://github.com/qdlaoyao/js-regex-mini-book",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("作者：老姚\n链接：https://juejin.im/post/5965943ff265da6c30653879\n来源：掘金")])])}),[],!1,null,null,null);t.default=v.exports}}]);